// Copyright (c) 2011-2019 Columbia University, System Level Design Group
// SPDX-License-Identifier: Apache-2.0

#ifndef __KPROP_HPP__
#define __KPROP_HPP__

#include "fpdata.hpp"
#include "kprop_conf_info.hpp"
#include "kprop_debug_info.hpp"

#include "esp_templates.hpp"

#include "kprop_directives.hpp"

#define __round_mask(x, y) ((y)-1)
#define round_up(x, y) ((((x)-1) | __round_mask(x, y))+1)
/* <<--defines-->> */
#define DATA_WIDTH 64
#define DMA_SIZE SIZE_DWORD
#define PLM_OUT_WORD 7859
#define PLM_IN_WORD 7859

#define input_dimension  13
#define possible_outputs  3
#define training_sets   163
#define nodes_per_layer  64

class kprop : public esp_accelerator_3P<DMA_WIDTH>
{
public:
    // Constructor
    SC_HAS_PROCESS(kprop);
    kprop(const sc_module_name& name)
    : esp_accelerator_3P<DMA_WIDTH>(name)
        , cfg("config")
    {
        // Signal binding
        cfg.bind_with(*this);

        // Map arrays to memories
        /* <<--plm-bind-->> */
		/* Generated by Default
        HLS_MAP_plm(plm_out_pong, PLM_OUT_NAME);
        HLS_MAP_plm(plm_out_ping, PLM_OUT_NAME);
        HLS_MAP_plm(plm_in_pong, PLM_IN_NAME);
        HLS_MAP_plm(plm_in_ping, PLM_IN_NAME);
		*/
		HLS_MAP_plm(plm_weights1_ping, PLM_WEIGHTS1_NAME);
		HLS_MAP_plm(plm_weights1_pong, PLM_WEIGHTS1_NAME);
		HLS_MAP_plm(plm_weights2_ping, PLM_WEIGHTS2_NAME);
		HLS_MAP_plm(plm_weights2_pong, PLM_WEIGHTS2_NAME);
		HLS_MAP_plm(plm_weights3_ping, PLM_WEIGHTS3_NAME);
		HLS_MAP_plm(plm_weights3_pong, PLM_WEIGHTS3_NAME);
		HLS_MAP_plm(plm_biases1_ping, PLM_BIASES1_NAME);
		HLS_MAP_plm(plm_biases1_pong, PLM_BIASES1_NAME);
		HLS_MAP_plm(plm_biases2_ping, PLM_BIASES2_NAME);
		HLS_MAP_plm(plm_biases2_pong, PLM_BIASES2_NAME);
		HLS_MAP_plm(plm_biases3_ping, PLM_BIASES3_NAME);
		HLS_MAP_plm(plm_biases3_pong, PLM_BIASES3_NAME);
		HLS_MAP_plm(plm_training_data_ping, PLM_TRAINING_DATA_NAME);
		HLS_MAP_plm(plm_training_data_pong, PLM_TRAINING_DATA_NAME);
		HLS_MAP_plm(plm_training_targets_ping, PLM_TRAINING_TARGETS_NAME);
		HLS_MAP_plm(plm_training_targets_pong, PLM_TRAINING_TARGETS_NAME);

		
		
		
    }

    // Processes

    // Load the input data
    void load_input();

    // Computation
    void compute_kernel();

    // Store the output data
    void store_output();

    // Configure kprop
    esp_config_proc cfg;

    // Functions

    // Private local memories
	/* Generated by Default
    sc_dt::sc_int<DATA_WIDTH> plm_in_ping[PLM_IN_WORD];
    sc_dt::sc_int<DATA_WIDTH> plm_in_pong[PLM_IN_WORD];
    sc_dt::sc_int<DATA_WIDTH> plm_out_ping[PLM_OUT_WORD];
    sc_dt::sc_int<DATA_WIDTH> plm_out_pong[PLM_OUT_WORD];
	*/
	
	FPDATA_WORD plm_weights1_ping[input_dimension*nodes_per_layer];
	FPDATA_WORD plm_weights1_pong[input_dimension*nodes_per_layer];
	FPDATA_WORD plm_weights2_ping[nodes_per_layer*nodes_per_layer];
	FPDATA_WORD plm_weights2_pong[nodes_per_layer*nodes_per_layer];
	FPDATA_WORD plm_weights3_ping[nodes_per_layer*possible_outputs];
	FPDATA_WORD plm_weights3_pong[nodes_per_layer*possible_outputs];
	FPDATA_WORD plm_biases1_ping[nodes_per_layer];
	FPDATA_WORD plm_biases1_pong[nodes_per_layer];
	FPDATA_WORD plm_biases2_ping[nodes_per_layer];
	FPDATA_WORD plm_biases2_pong[nodes_per_layer];
	FPDATA_WORD plm_biases3_ping[possible_outputs];
	FPDATA_WORD plm_biases3_pong[possible_outputs];
	FPDATA_WORD plm_training_data_ping[training_sets*input_dimension];
	FPDATA_WORD plm_training_data_pong[training_sets*input_dimension];
	FPDATA_WORD plm_training_targets_ping[training_sets*possible_outputs];
	FPDATA_WORD plm_training_targets_pong[training_sets*possible_outputs];

};


#endif /* __KPROP_HPP__ */
