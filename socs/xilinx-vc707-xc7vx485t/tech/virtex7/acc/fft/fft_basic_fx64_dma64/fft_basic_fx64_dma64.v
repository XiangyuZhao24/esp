// Generated by stratus_hls 18.15-s100  (89787.272216)
// Mon Mar  2 13:02:27 2020
// from ../src/fft.cpp

`timescale 1ps / 1ps

      
module fft_basic_fx64_dma64(clk, rst, conf_info_do_peak, conf_info_do_bitrev, conf_info_log_len, conf_done, acc_done, debug, dma_read_chnl_valid, dma_read_chnl_data, dma_read_chnl_ready, dma_read_ctrl_valid, dma_read_ctrl_data_index, dma_read_ctrl_data_length, dma_read_ctrl_data_size, dma_read_ctrl_ready, dma_write_ctrl_valid, dma_write_ctrl_data_index, dma_write_ctrl_data_length, dma_write_ctrl_data_size, dma_write_ctrl_ready, dma_write_chnl_valid, dma_write_chnl_data, dma_write_chnl_ready);

      input clk;
      input rst;
      input [31:0] conf_info_do_peak;
      input [31:0] conf_info_do_bitrev;
      input [31:0] conf_info_log_len;
      input conf_done;
      input dma_read_chnl_valid;
      input [63:0] dma_read_chnl_data;
      input dma_read_ctrl_ready;
      input dma_write_ctrl_ready;
      input dma_write_chnl_ready;
      output acc_done;
      reg acc_done;
      output [31:0] debug;
      output dma_read_chnl_ready;
      output dma_read_ctrl_valid;
      reg dma_read_ctrl_valid;
      output [31:0] dma_read_ctrl_data_index;
      output [31:0] dma_read_ctrl_data_length;
      output [2:0] dma_read_ctrl_data_size;
      output dma_write_ctrl_valid;
      reg dma_write_ctrl_valid;
      output [31:0] dma_write_ctrl_data_index;
      output [31:0] dma_write_ctrl_data_length;
      output [2:0] dma_write_ctrl_data_size;
      output dma_write_chnl_valid;
      output [63:0] dma_write_chnl_data;
      reg [63:0] dma_write_chnl_data;
      reg hi_A0_1_WE1;
      reg hi_A0_1_CE1;
      reg[63:0] hi_A0_1_D1;
      reg[14:0] hi_A0_1_A1;
      wire[63:0] hi_A0_1_WEM1;
      wire[14:0] fft_plm_block_in_fx64_A0_1_1_A2;
      reg hi_A0_1_CE3;
      reg[14:0] hi_A0_1_A3;
      reg[1:0] cfg_config_accelerator_next;
      reg[1:0] global_state3;
      wire fft_Not_1U_1U_4_117_out1;
      wire fft_Xor_1Ux1U_1U_4_113_out1;
      wire fft_And_1Ux1U_1U_4_112_out1;
      wire fft_Not_1U_1U_4_111_out1;
      wire fft_Xor_1Ux1U_1U_4_110_out1;
      wire fft_Or_1Ux1U_1U_4_114_out1;
      wire fft_Not_1U_1U_4_115_out1;
      reg dma_write_chnl_sync_snd_valid_flop;
      reg fft_N_Muxb_1_2_5_4_116_out1;
      reg dma_write_chnl_sync_snd_reset_valid_curr;
      reg dma_write_chnl_sync_snd_reset_valid_prev;
      reg dma_write_chnl_sync_snd_set_valid_prev;
      wire fft_Not_1U_1U_4_103_out1;
      wire fft_Xor_1Ux1U_1U_4_97_out1;
      wire fft_And_1Ux1U_1U_4_96_out1;
      wire fft_Not_1U_1U_4_95_out1;
      wire fft_Xor_1Ux1U_1U_4_94_out1;
      wire fft_Or_1Ux1U_1U_4_98_out1;
      wire fft_And_1Ux1U_1U_4_100_out1;
      wire fft_Not_1U_1U_4_99_out1;
      reg dma_read_chnl_sync_rcv_ready_flop;
      reg fft_N_Muxb_1_2_5_4_101_out1;
      reg dma_read_chnl_sync_rcv_reset_ready_curr;
      reg dma_read_chnl_sync_rcv_reset_ready_prev;
      reg dma_read_chnl_sync_rcv_set_ready_prev;
      reg[63:0] fft_N_MuxB_64_2_0_4_102_out1;
      reg gs_ctrl49;
      reg[3:0] global_state2_next;
      wire[31:0] fft_LessThan_16Ux32U_1U_4_121_in1;
      reg fft_plm_block_in_fx64_A0_5_18_CE3;
      reg[1:0] gs_ctrl50;
      reg[15:0] fft_Add_16Ux2S_16U_4_120_in2;
      reg gs_ctrl48;
      wire[15:0] fft_Add_16Ux2S_16U_4_120_out1;
      reg[15:0] s_reg_81;
      /*signed*/reg[4:0] s_reg_76_slice;
      wire fft_Not_1U_1U_4_122_out1;
      reg dma_write_chnl_set_valid_curr;
      wire fft_LessThan_16Ux32U_1U_4_121_out1;
      reg[30:0] s_reg_77;
      /*signed*/wire[30:0] fft_LeftShift_2Sx5U_31S_4_119_out1;
      reg[30:0] dma_write_ctrl_data_length_slice;
      reg[1:0] dma_write_ctrl_data_size_slice;
      reg[63:0] s_reg_82;
      wire fft_Or_1Ux1U_1U_4_118_out1;
      reg[3:0] global_state2;
      reg gs_ctrl28;
      reg gs_ctrl27;
      reg[1:0] gs_ctrl26;
      reg[1:0] gs_ctrl25;
      reg[1:0] gs_ctrl22;
      reg[1:0] gs_ctrl21;
      reg[4:0] global_state1_next;
      /*signed*/wire[63:0] fft_Add_64Sx1U_64S_4_92_in2;
      /*signed*/wire[63:0] fft_Add_64Sx1U_64S_4_91_in2;
      wire[62:0] fft_Or_64Sx63U_64S_4_90_in1;
      /*signed*/wire[63:0] fft_Or_64Sx63U_64S_4_90_in2;
      /*signed*/wire[63:0] fft_Or_64Sx63U_64S_4_89_out1;
      wire[62:0] fft_Or_64Sx63U_64S_4_89_in1;
      /*signed*/wire[63:0] fft_Or_64Sx63U_64S_4_89_in2;
      wire[62:0] fft_Or_64Sx63U_64S_4_88_in1;
      /*signed*/wire[63:0] fft_Or_64Sx63U_64S_4_88_in2;
      /*signed*/wire[63:0] fft_Or_64Sx63U_64S_4_87_out1;
      wire[62:0] fft_Or_64Sx63U_64S_4_87_in1;
      /*signed*/wire[63:0] fft_Or_64Sx63U_64S_4_87_in2;
      /*signed*/wire[63:0] fft_Add_64Sx1U_64S_4_82_out1;
      /*signed*/wire[63:0] fft_Add_64Sx1U_64S_4_82_in2;
      /*signed*/wire[63:0] fft_Or_64Sx63U_64S_4_81_out1;
      /*signed*/wire[63:0] fft_Or_64Sx63U_64S_4_81_in2;
      /*signed*/wire[63:0] fft_Or_64Sx63U_64S_4_80_out1;
      /*signed*/wire[63:0] fft_Or_64Sx63U_64S_4_80_in2;
      wire fft_Add_64Sx1U_64S_4_79_in1;
      /*signed*/wire[63:0] fft_Add_64Sx1U_64S_4_79_in2;
      wire[85:0] fft_Sub_86Ux86U_86U_4_77_out1;
      /*signed*/wire[63:0] fft_Or_64Sx63U_64S_4_72_out1;
      /*signed*/wire[63:0] fft_Or_64Sx63U_64S_4_72_in2;
      /*signed*/wire[63:0] fft_Or_64Sx63U_64S_4_71_out1;
      /*signed*/wire[63:0] fft_Or_64Sx63U_64S_4_71_in2;
      wire[85:0] fft_Add_86Ux86U_86U_4_70_in1;
      wire[85:0] fft_Sub_86Ux86U_86U_4_69_in2;
      reg gs_ctrl47;
      /*signed*/reg[22:0] fft_Mul_64Sx64S_86S_4_64_in2_slice;
      reg gs_ctrl46;
      reg gs_ctrl45;
      /*signed*/reg[21:0] fft_Mul_64Sx64S_86S_4_63_in2_slice1;
      reg gs_ctrl44;
      reg gs_ctrl43;
      /*signed*/reg[22:0] fft_Mul_64Sx64S_86S_4_62_in2_slice;
      reg gs_ctrl42;
      reg gs_ctrl41;
      /*signed*/reg[21:0] fft_Mul_64Sx64S_86S_4_61_in2_slice1;
      reg gs_ctrl40;
      reg[13:0] fft_Add_14Ux14U_14U_4_59_in1;
      reg gs_ctrl39;
      reg[13:0] fft_Add_14Ux14U_14U_4_59_in2;
      reg[1:0] gs_ctrl38;
      reg[31:0] fft_Add_32Ux32U_32U_4_57_in1;
      reg gs_ctrl37;
      reg[31:0] fft_Add_32Ux32U_32U_4_57_in2;
      reg gs_ctrl36;
      /*signed*/reg[30:0] fft_Add_31Sx1U_32S_4_55_in2;
      reg gs_ctrl35;
      wire fft_And_1Ux1U_1U_4_54_out1;
      reg fft_And_1Ux1U_1U_4_54_in1;
      reg gs_ctrl34;
      reg fft_And_1Ux1U_1U_4_54_in2;
      reg gs_ctrl33;
      wire[63:0] fft_plm_block_in_fx64_A0_1_1_WEM0;
      reg fft_plm_block_in_fx64_A0_1_1_CE0;
      reg gs_ctrl32;
      reg fft_plm_block_in_fx64_A0_1_1_WE0;
      reg gs_ctrl31;
      reg[63:0] fft_plm_block_in_fx64_A0_1_1_D0;
      /*signed*/wire[63:0] fft_Or_64Sx63U_64S_4_88_out1;
      /*signed*/wire[63:0] fft_Or_64Sx63U_64S_4_90_out1;
      reg[1:0] gs_ctrl30;
      reg[14:0] fft_plm_block_in_fx64_A0_1_1_A0;
      reg[1:0] gs_ctrl29;
      reg fft_plm_block_in_fx64_A0_1_1_CE2;
      reg[1:0] gs_ctrl24;
      reg[13:0] fft_plm_block_in_fx64_A0_1_1_A2_slice;
      reg[1:0] gs_ctrl23;
      wire[4:0] fft_Minus_5U_5U_4_44_out1;
      reg[4:0] fft_LeftShift_32Ux5U_32U_4_43_in1;
      reg[31:0] fft_LeftShift_32Ux5U_32U_4_43_in2;
      wire fft_LessThan_32Sx6S_1U_4_42_out1;
      wire fft_OrReduction_24U_1U_4_40_out1;
      /*signed*/wire[31:0] fft_Sub_32Sx1U_32S_4_39_out1;
      wire[31:0] fft_N_Mux_32_2_2_4_38_in2;
      wire[31:0] fft_N_Mux_32_2_2_4_37_in2;
      reg[31:0] fft_N_Mux_32_2_2_4_35_out1;
      wire[31:0] fft_N_Mux_32_2_2_4_35_in2;
      /*signed*/wire[31:0] fft_Sub_32Sx1U_32S_4_34_out1;
      /*signed*/wire[31:0] fft_Sub_32Sx1U_32S_4_33_out1;
      reg[31:0] fft_N_Mux_32_2_2_4_32_out1;
      wire[31:0] fft_N_Mux_32_2_2_4_32_in2;
      /*signed*/wire[31:0] fft_Sub_32Sx1U_32S_4_31_out1;
      wire fft_OrReduction_24U_1U_4_30_out1;
      wire fft_OrReduction_26U_1U_4_26_out1;
      wire fft_OrReduction_27U_1U_4_25_out1;
      reg[31:0] fft_N_Mux_32_2_2_4_23_in2;
      reg[1:0] gs_ctrl20;
      /*signed*/wire[31:0] fft_Add_32Sx4S_32S_4_22_out1;
      /*signed*/reg[31:0] fft_Add_32Sx4S_32S_4_22_in2;
      reg gs_ctrl19;
      reg[27:0] fft_OrReduction_28U_1U_4_21_in1;
      reg[1:0] gs_ctrl18;
      reg[31:0] fft_N_Mux_32_2_2_4_20_out1;
      reg[31:0] fft_N_Mux_32_2_2_4_20_in2;
      reg[1:0] gs_ctrl17;
      reg[28:0] fft_OrReduction_30U_1U_4_18_in1_slice;
      reg[1:0] gs_ctrl16;
      reg[31:0] fft_N_Mux_32_2_2_4_17_out1;
      reg[31:0] fft_N_Mux_32_2_2_4_17_in2;
      reg[1:0] gs_ctrl15;
      /*signed*/wire[31:0] fft_Sub_32Sx1U_32S_4_16_out1;
      /*signed*/reg[31:0] fft_Sub_32Sx1U_32S_4_16_in2;
      /*signed*/wire[31:0] fft_Sub_32Sx1U_32S_4_41_out1;
      reg gs_ctrl14;
      wire fft_OrReduction_30U_1U_4_15_out1;
      reg[29:0] fft_OrReduction_30U_1U_4_15_in1;
      reg[1:0] gs_ctrl13;
      reg[31:0] fft_N_Mux_32_2_2_4_14_out1;
      reg[31:0] fft_N_Mux_32_2_2_4_14_in2;
      reg[1:0] gs_ctrl12;
      reg[31:0] fft_N_Mux_32_2_2_4_14_in3;
      reg[1:0] gs_ctrl11;
      wire fft_OrReduction_31U_1U_4_13_out1;
      reg[30:0] fft_OrReduction_31U_1U_4_13_in1;
      reg[1:0] gs_ctrl10;
      wire fft_OrReduction_31U_1U_4_12_out1;
      reg[30:0] fft_OrReduction_31U_1U_4_12_in1;
      reg[1:0] gs_ctrl9;
      reg[24:0] fft_OrReduction_26U_1U_4_11_in1_slice;
      reg[1:0] gs_ctrl8;
      reg[25:0] fft_OrReduction_26U_1U_4_10_in1;
      reg[1:0] gs_ctrl7;
      reg[26:0] fft_OrReduction_27U_1U_4_9_in1;
      reg[1:0] gs_ctrl6;
      wire fft_OrReduction_28U_1U_4_8_out1;
      reg[27:0] fft_OrReduction_28U_1U_4_8_in1;
      reg[1:0] gs_ctrl5;
      wire fft_OrReduction_30U_1U_4_7_out1;
      reg[28:0] fft_OrReduction_30U_1U_4_7_in1_slice;
      reg[1:0] gs_ctrl4;
      wire fft_OrReduction_30U_1U_4_6_out1;
      reg[29:0] fft_OrReduction_30U_1U_4_6_in1;
      reg[1:0] gs_ctrl3;
      wire fft_Not_1U_1U_4_4_out1;
      wire fft_OrReduction_32S_1U_4_3_out1;
      wire fft_OrReduction_32S_1U_4_2_out1;
      reg[25:0] s_reg_9;
      reg[26:0] s_reg_8;
      wire[63:0] fft_Sub_64Ux64U_64U_4_86_out1;
      reg[63:0] s_reg_68;
      wire[63:0] fft_Sub_64Ux64U_64U_4_85_out1;
      reg[63:0] s_reg_67;
      wire[63:0] fft_Add_64Ux64U_64U_4_84_out1;
      reg[63:0] s_reg_66;
      wire[63:0] fft_Add_64Ux64U_64U_4_83_out1;
      reg[63:0] s_reg_65;
      /*signed*/wire[63:0] fft_Add_64Sx1U_64S_4_79_out1;
      reg[63:0] s_reg_64;
      wire[85:0] fft_Add_86Ux86U_86U_4_78_out1;
      reg[64:0] s_reg_63;
      reg[63:0] s_reg_62;
      reg[63:0] s_reg_61;
      reg[63:0] s_reg_60;
      reg fft_N_Mux_1_2_1_4_5_out1;
      reg[63:0] s_reg_59;
      wire[85:0] fft_Add_86Ux86U_86U_4_70_out1;
      reg[64:0] s_reg_58;
      wire[85:0] fft_Sub_86Ux86U_86U_4_69_out1;
      reg[64:0] s_reg_57;
      wire[13:0] fft_Add_14Ux14U_14U_4_68_out1;
      reg[13:0] s_reg_56;
      /*signed*/wire[31:0] fft_Add_32Sx2S_32S_4_67_out1;
      wire[85:0] fft_Sub_86Ux86U_86U_4_66_out1;
      reg[85:0] s_reg_54;
      wire[85:0] fft_Add_86Ux86U_86U_4_65_out1;
      reg[85:0] s_reg_53;
      wire[13:0] fft_Add_14Ux14U_14U_4_60_out1;
      reg[13:0] s_reg_52;
      wire[13:0] fft_Add_14Ux14U_14U_4_59_out1;
      reg[13:0] s_reg_51;
      reg[31:0] s_reg_55;
      reg[31:0] s_reg_50;
      reg[31:0] s_reg_5;
      /*signed*/wire[63:0] fft_Add_64Sx1U_64S_4_92_out1;
      reg[63:0] s_reg_49;
      /*signed*/wire[63:0] fft_Add_64Sx1U_64S_4_91_out1;
      reg[63:0] s_reg_48;
      wire[31:0] fft_Add_32Ux32U_32U_4_57_out1;
      reg[31:0] s_reg_46;
      reg[31:0] s_reg_45;
      /*signed*/wire[31:0] fft_Add_31Sx1U_32S_4_55_out1;
      reg[31:0] s_reg_44;
      reg[22:0] fft_N_Mux_23_16_4_4_52_out1;
      reg[22:0] s_reg_42;
      reg[21:0] fft_N_Mux_24_14_3_4_51_out1_slice;
      reg[21:0] s_reg_41_slice;
      /*signed*/wire[31:0] fft_LeftShift_2Sx5U_32S_4_1_out1;
      /*signed*/wire[31:0] fft_LeftShift_2Sx5U_32S_4_49_out1;
      reg[31:0] s_reg_39;
      reg[14:0] s_reg_38;
      reg[13:0] s_reg_37_slice;
      reg[14:0] s_reg_36;
      reg[13:0] s_reg_35_slice;
      reg[63:0] s_reg_34;
      reg[63:0] s_reg_33;
      /*signed*/wire[31:0] fft_Add_32Ux2S_32S_4_47_out1;
      wire fft_LessThan_32Ux32U_1U_4_46_out1;
      wire[63:0] hi_A0_1_Q2;
      reg[63:0] s_reg_30;
      wire[63:0] hi_A0_1_Q3;
      reg[63:0] s_reg_29;
      wire[31:0] fft_RightShift_32Ux5U_32U_4_45_out1;
      reg[31:0] s_reg_28;
      wire[31:0] fft_LeftShift_32Ux5U_32U_4_43_out1;
      reg[31:0] s_reg_27;
      reg[31:0] fft_N_Mux_32_2_2_4_38_out1;
      reg[31:0] s_reg_25;
      reg[31:0] fft_N_Mux_32_2_2_4_37_out1;
      reg[31:0] s_reg_24;
      /*signed*/wire[31:0] fft_Sub_32Sx1U_32S_4_36_out1;
      reg[31:0] s_reg_23;
      wire fft_OrReduction_26U_1U_4_29_out1;
      reg s_reg_22;
      /*signed*/wire[31:0] fft_Add_32Sx2S_32S_4_28_out1;
      reg[31:0] s_reg_21;
      wire fft_LessThan_32Sx6S_1U_4_27_out1;
      reg s_reg_20;
      /*signed*/wire[31:0] fft_Add_32Ux2S_32S_4_50_out1;
      reg[31:0] s_reg_2;
      /*signed*/wire[31:0] fft_Add_32Sx2S_32S_4_24_out1;
      reg[31:0] s_reg_18;
      reg[31:0] fft_N_Mux_32_2_2_4_23_out1;
      reg[31:0] s_reg_17;
      wire fft_OrReduction_28U_1U_4_21_out1;
      reg s_reg_16;
      /*signed*/wire[31:0] fft_Sub_32Sx1U_32S_4_19_out1;
      reg[31:0] s_reg_15;
      wire fft_OrReduction_30U_1U_4_18_out1;
      reg s_reg_14;
      wire fft_OrReduction_26U_1U_4_11_out1;
      reg s_reg_13;
      wire fft_OrReduction_26U_1U_4_10_out1;
      reg s_reg_12;
      wire fft_OrReduction_27U_1U_4_9_out1;
      reg s_reg_11;
      reg[23:0] s_reg_19_slice;
      reg[24:0] s_reg_10;
      reg[31:0] s_reg_32;
      reg[31:0] s_reg_1;
      reg output_ready_channel_valid;
      wire fft_LessThan_32Sx32S_1U_4_93_out1;
      reg s_reg_47;
      reg s_reg_43;
      reg s_reg_31;
      wire fft_LessThan_32Ux32U_1U_4_48_out1;
      wire fft_LessThan_1Sx32S_1U_4_56_out1;
      wire fft_LessThan_32Ux32U_1U_4_58_out1;
      wire fft_LessThanEQ_32Ux32U_1U_4_53_out1;
      reg[31:0] s_reg_4;
      reg[31:0] s_reg_3;
      reg s_reg_6;
      reg output_ready_channel_ready;
      reg[4:0] global_state1;
      reg gs_ctrl1;
      reg cfg_done;
      reg[3:0] global_state_next;
      reg fft_plm_block_in_fx64_A0_3_17_CE1;
      reg gs_ctrl2;
      wire[31:0] fft_LessThan_16Ux32U_1U_4_109_in1;
      reg[63:0] dma_read_chnl_data_buf;
      reg[15:0] fft_Add_16Ux2S_16U_4_106_in2;
      reg gs_ctrl0;
      reg[63:0] fft_N_MuxB_64_2_0_4_108_out1;
      reg[63:0] s_reg_74;
      wire[15:0] fft_Add_16Ux2S_16U_4_106_out1;
      /*signed*/reg[4:0] s_reg_70_slice;
      reg[15:0] s_reg_73;
      reg[15:0] s_reg_69;
      reg input_ready_channel_valid;
      reg input_ready_channel_ready;
      wire fft_LessThan_16Ux32U_1U_4_109_out1;
      wire fft_Not_1U_1U_4_107_out1;
      reg[30:0] s_reg_71;
      wire fft_Or_1Ux1U_1U_4_104_out1;
      reg dma_read_chnl_set_ready_curr;
      /*signed*/wire[30:0] fft_LeftShift_2Sx5U_31S_4_105_out1;
      reg[30:0] dma_read_ctrl_data_length_slice;
      reg[3:0] global_state;
      reg[1:0] dma_read_ctrl_data_size_slice;
      /*signed*/wire[63:0] fft_Mul_64Sx64S_86S_4_61_in2;
      /*signed*/reg[63:0] fft_Mul_64Sx64S_86S_4_61_in1;
      /*signed*/wire[85:0] fft_Mul_64Sx64S_86S_4_61_out1;
      /*signed*/wire[63:0] fft_Mul_64Sx64S_86S_4_62_in2;
      /*signed*/reg[63:0] fft_Mul_64Sx64S_86S_4_62_in1;
      /*signed*/wire[85:0] fft_Mul_64Sx64S_86S_4_62_out1;
      /*signed*/wire[63:0] fft_Mul_64Sx64S_86S_4_63_in2;
      /*signed*/reg[63:0] fft_Mul_64Sx64S_86S_4_63_in1;
      /*signed*/wire[85:0] fft_Mul_64Sx64S_86S_4_63_out1;
      /*signed*/wire[63:0] fft_Mul_64Sx64S_86S_4_64_in2;
      /*signed*/reg[63:0] fft_Mul_64Sx64S_86S_4_64_in1;
      /*signed*/wire[85:0] fft_Mul_64Sx64S_86S_4_64_out1;
      /*signed*/wire[63:0] fft_Mul_64Sx64S_86S_4_73_in2;
      /*signed*/wire[63:0] fft_Mul_64Sx64S_86S_4_73_in1;
      /*signed*/wire[85:0] fft_Mul_64Sx64S_86S_4_73_out1;
      /*signed*/wire[63:0] fft_Mul_64Sx64S_86S_4_74_in2;
      /*signed*/wire[63:0] fft_Mul_64Sx64S_86S_4_74_in1;
      /*signed*/wire[85:0] fft_Mul_64Sx64S_86S_4_74_out1;
      /*signed*/wire[63:0] fft_Mul_64Sx64S_86S_4_75_in2;
      /*signed*/wire[63:0] fft_Mul_64Sx64S_86S_4_75_in1;
      /*signed*/wire[85:0] fft_Mul_64Sx64S_86S_4_75_out1;
      /*signed*/wire[63:0] fft_Mul_64Sx64S_86S_4_76_in2;
      /*signed*/wire[63:0] fft_Mul_64Sx64S_86S_4_76_in1;
      /*signed*/wire[85:0] fft_Mul_64Sx64S_86S_4_76_out1;

         // thread: drive_debug
         assign debug = 32'd0000000000;

         fft_Mul_64Sx64S_86S_4 fft_Mul_64Sx64S_86S_4_76(
                                 .in2( fft_Mul_64Sx64S_86S_4_76_in2 ),
                                 .in1( fft_Mul_64Sx64S_86S_4_76_in1 ),
                                 .out1( fft_Mul_64Sx64S_86S_4_76_out1 ),
                                 .clk( clk ),
                                 .clr( rst )
                               );

         fft_Mul_64Sx64S_86S_4 fft_Mul_64Sx64S_86S_4_75(
                                 .in2( fft_Mul_64Sx64S_86S_4_75_in2 ),
                                 .in1( fft_Mul_64Sx64S_86S_4_75_in1 ),
                                 .out1( fft_Mul_64Sx64S_86S_4_75_out1 ),
                                 .clk( clk ),
                                 .clr( rst )
                               );

         fft_Mul_64Sx64S_86S_4 fft_Mul_64Sx64S_86S_4_74(
                                 .in2( fft_Mul_64Sx64S_86S_4_74_in2 ),
                                 .in1( fft_Mul_64Sx64S_86S_4_74_in1 ),
                                 .out1( fft_Mul_64Sx64S_86S_4_74_out1 ),
                                 .clk( clk ),
                                 .clr( rst )
                               );

         fft_Mul_64Sx64S_86S_4 fft_Mul_64Sx64S_86S_4_73(
                                 .in2( fft_Mul_64Sx64S_86S_4_73_in2 ),
                                 .in1( fft_Mul_64Sx64S_86S_4_73_in1 ),
                                 .out1( fft_Mul_64Sx64S_86S_4_73_out1 ),
                                 .clk( clk ),
                                 .clr( rst )
                               );

         fft_Mul_64Sx64S_86S_4 fft_Mul_64Sx64S_86S_4_64(
                                 .in2( fft_Mul_64Sx64S_86S_4_64_in2 ),
                                 .in1( fft_Mul_64Sx64S_86S_4_64_in1 ),
                                 .out1( fft_Mul_64Sx64S_86S_4_64_out1 ),
                                 .clk( clk ),
                                 .clr( rst )
                               );

         fft_Mul_64Sx64S_86S_4 fft_Mul_64Sx64S_86S_4_63(
                                 .in2( fft_Mul_64Sx64S_86S_4_63_in2 ),
                                 .in1( fft_Mul_64Sx64S_86S_4_63_in1 ),
                                 .out1( fft_Mul_64Sx64S_86S_4_63_out1 ),
                                 .clk( clk ),
                                 .clr( rst )
                               );

         fft_Mul_64Sx64S_86S_4 fft_Mul_64Sx64S_86S_4_62(
                                 .in2( fft_Mul_64Sx64S_86S_4_62_in2 ),
                                 .in1( fft_Mul_64Sx64S_86S_4_62_in1 ),
                                 .out1( fft_Mul_64Sx64S_86S_4_62_out1 ),
                                 .clk( clk ),
                                 .clr( rst )
                               );

         fft_Mul_64Sx64S_86S_4 fft_Mul_64Sx64S_86S_4_61(
                                 .in2( fft_Mul_64Sx64S_86S_4_61_in2 ),
                                 .in1( fft_Mul_64Sx64S_86S_4_61_in1 ),
                                 .out1( fft_Mul_64Sx64S_86S_4_61_out1 ),
                                 .clk( clk ),
                                 .clr( rst )
                               );

         // resource: regr_2
         always @(posedge clk)
          begin :drive_dma_read_ctrl_data_size
            if (rst == 1'b0) begin
               dma_read_ctrl_data_size_slice <= 2'd0;
            end
            else begin
               case (global_state) 

                  4'd03:                   begin
                     dma_read_ctrl_data_size_slice <= 2'd3;
                  end
                  
               endcase

            end
         end

         // resource: regr_31
         always @(posedge clk)
          begin :drive_dma_read_ctrl_data_length
            if (rst == 1'b0) begin
               dma_read_ctrl_data_length_slice <= 31'd0000000000;
            end
            else begin
               case (global_state) 

                  4'd03:                   begin
                     dma_read_ctrl_data_length_slice <= fft_LeftShift_2Sx5U_31S_4_105_out1;
                  end
                  
               endcase

            end
         end

         // resource: mux_1bx2i
         // resource: regr_1
         always @(posedge clk)
          begin :drive_dma_read_ctrl_valid
            if (rst == 1'b0) begin
               dma_read_ctrl_valid <= 1'd0;
            end
            else begin
               case (global_state) 

                  4'd03:                   begin
                     dma_read_ctrl_valid <= 1'd1;
                  end
                  
                  4'd04:                   begin
                     if (dma_read_ctrl_ready) begin
                        dma_read_ctrl_valid <= 1'd0;
                     end
                  end
                  
               endcase

            end
         end

         // resource: regr_1
         always @(posedge clk)
          begin :drive_dma_read_chnl_set_ready_curr
            if (rst == 1'b0) begin
               dma_read_chnl_set_ready_curr <= 1'd0;
            end
            else begin
               case (global_state) 

                  4'd04:                   begin
                     if (dma_read_ctrl_ready && (31'd0000000000 != s_reg_71 && fft_Or_1Ux1U_1U_4_104_out1)) begin
                        dma_read_chnl_set_ready_curr <= fft_Not_1U_1U_4_107_out1;
                     end
                  end
                  
                  4'd05:                   begin
                     if (fft_Or_1Ux1U_1U_4_104_out1) begin
                        dma_read_chnl_set_ready_curr <= fft_Not_1U_1U_4_107_out1;
                     end
                  end
                  
                  4'd06:                   begin
                     if (fft_LessThan_16Ux32U_1U_4_109_out1 && fft_Or_1Ux1U_1U_4_104_out1) begin
                        dma_read_chnl_set_ready_curr <= fft_Not_1U_1U_4_107_out1;
                     end
                  end
                  
               endcase

            end
         end

         // resource: mux_1bx2i
         // resource: regr_1
         always @(posedge clk)
          begin :drive_input_ready_channel_ready
            if (rst == 1'b0) begin
               input_ready_channel_ready <= 1'd0;
            end
            else begin
               case (global_state) 

                  4'd04:                   begin
                     if (dma_read_ctrl_ready && 31'd0000000000 == s_reg_71) begin
                        input_ready_channel_ready <= 1'd1;
                     end
                  end
                  
                  4'd06:                   begin
                     if (fft_LessThan_16Ux32U_1U_4_109_out1) begin
                     end
                     else begin
                        input_ready_channel_ready <= 1'd1;
                     end
                  end
                  
                  4'd07:                   begin
                     if (input_ready_channel_valid) begin
                        input_ready_channel_ready <= 1'd0;
                     end
                  end
                  
               endcase

            end
         end

         // resource: regr_16
         always @(posedge clk)
          begin :drive_s_reg_69
            if (rst == 1'b0) begin
               s_reg_69 <= 16'd00000;
            end
            else begin
               case (global_state) 

                  4'd06:                   begin
                     s_reg_69 <= s_reg_73;
                  end
                  
               endcase

            end
         end

         // resource: regr_5
         always @(posedge clk)
          begin :drive_s_reg_70
            if (rst == 1'b0) begin
               s_reg_70_slice <= 5'd00;
            end
            else begin
               case (global_state) 

                  4'd00, 4'd01:                   begin
                     s_reg_70_slice <= conf_info_log_len[4:0];
                  end
                  
               endcase

            end
         end

         // resource: regr_31
         always @(posedge clk)
          begin :drive_s_reg_71
            if (rst == 1'b0) begin
               s_reg_71 <= 31'd0000000000;
            end
            else begin
               case (global_state) 

                  4'd03:                   begin
                     s_reg_71 <= fft_LeftShift_2Sx5U_31S_4_105_out1;
                  end
                  
               endcase

            end
         end

         // resource: regr_16
         always @(posedge clk)
          begin :drive_s_reg_73
            if (rst == 1'b0) begin
               s_reg_73 <= 16'd00000;
            end
            else begin
               case (global_state) 

                  4'd04:                   begin
                     if (31'd0000000000 != s_reg_71) begin
                        s_reg_73 <= fft_Add_16Ux2S_16U_4_106_out1;
                     end
                  end
                  
                  4'd06:                   begin
                     s_reg_73 <= fft_Add_16Ux2S_16U_4_106_out1;
                  end
                  
               endcase

            end
         end

         // resource: regr_64
         always @(posedge clk)
          begin :drive_s_reg_74
            if (rst == 1'b0) begin
               s_reg_74 <= 64'd00000000000000000000;
            end
            else begin
               case (global_state) 

                  4'd04:                   begin
                     if (31'd0000000000 != s_reg_71) begin
                        s_reg_74 <= fft_N_MuxB_64_2_0_4_108_out1;
                     end
                  end
                  
                  4'd05, 4'd06:                   begin
                     s_reg_74 <= fft_N_MuxB_64_2_0_4_108_out1;
                  end
                  
               endcase

            end
         end

         // resource: fft_LeftShift_2Sx5U_31S_4  instance: fft_LeftShift_2Sx5U_31S_4_105
         assign fft_LeftShift_2Sx5U_31S_4_105_out1 = 31'd0000000001 << s_reg_70_slice;

         // resource: mux_16bx2i
         always @(s_reg_69 or s_reg_73 or gs_ctrl0)
          begin :drive_fft_Add_16Ux2S_16U_4_106_in2
            if (gs_ctrl0) begin
               fft_Add_16Ux2S_16U_4_106_in2 = s_reg_73;
            end
            else begin
               fft_Add_16Ux2S_16U_4_106_in2 = s_reg_69;
            end
         end

         // resource: fft_Add_16Ux2S_16U_4  instance: fft_Add_16Ux2S_16U_4_106
         assign fft_Add_16Ux2S_16U_4_106_out1 = fft_Add_16Ux2S_16U_4_106_in2 + 16'd00001;

         // resource: fft_Not_1U_1U_4  instance: fft_Not_1U_1U_4_107
         assign fft_Not_1U_1U_4_107_out1 = !dma_read_chnl_set_ready_curr;

         // resource:fft_N_MuxB_64_2_0_4
         always @(dma_read_chnl_ready or dma_read_chnl_data or dma_read_chnl_data_buf)
          begin :fft_N_MuxB_64_2_0_4_108
            if (dma_read_chnl_ready) begin
               fft_N_MuxB_64_2_0_4_108_out1 = dma_read_chnl_data;
            end
            else begin
               fft_N_MuxB_64_2_0_4_108_out1 = dma_read_chnl_data_buf;
            end
         end

         // thread: drive_fft_LessThan_16Ux32U_1U_4_109_in1
         assign fft_LessThan_16Ux32U_1U_4_109_in1 = {s_reg_71, 1'b0};

         // resource: fft_LessThan_16Ux32U_1U_4  instance: fft_LessThan_16Ux32U_1U_4_109
         assign fft_LessThan_16Ux32U_1U_4_109_out1 = {16'b0000000000000000, s_reg_73} < fft_LessThan_16Ux32U_1U_4_109_in1;

         // resource: mux_1bx2i
         always @(gs_ctrl2)
          begin :drive_fft_plm_block_in_fx64_A0_3_17_CE1
            if (gs_ctrl2) begin
               fft_plm_block_in_fx64_A0_3_17_CE1 = 1'd1;
            end
            else begin
               fft_plm_block_in_fx64_A0_3_17_CE1 = 1'd0;
            end
         end

         // resource: regr_4
         always @(posedge clk)
          begin :drive_global_state
            if (rst == 1'b0) begin
               global_state <= 4'd00;
            end
            else begin
               global_state <= global_state_next;
            end
         end

         // resource: mux_4bx8i
         always @(dma_read_ctrl_ready or cfg_done or input_ready_channel_valid or fft_Or_1Ux1U_1U_4_104_out1 or s_reg_71 or fft_LessThan_16Ux32U_1U_4_109_out1 or global_state)
          begin :drive_global_state_next
            case (global_state) 

               4'd00, 4'd01:                begin
                  if (cfg_done) begin
                     global_state_next = 4'd02;
                  end
                  else begin
                     global_state_next = 4'd01;
                  end
               end
               
               4'd04:                begin
                  if (dma_read_ctrl_ready) begin
                     case (s_reg_71) 

                        31'd0000000000:                         begin
                           global_state_next = 4'd07;
                        end
                        
                        default:                         begin
                           if (fft_Or_1Ux1U_1U_4_104_out1) begin
                              global_state_next = 4'd06;
                           end
                           else begin
                              global_state_next = global_state + 4'd01;
                           end
                        end
                        
                     endcase

                  end
                  else begin
                     global_state_next = 4'd04;
                  end
               end
               
               4'd05:                begin
                  if (fft_Or_1Ux1U_1U_4_104_out1) begin
                     global_state_next = global_state + 4'd01;
                  end
                  else begin
                     global_state_next = 4'd05;
                  end
               end
               
               4'd06:                begin
                  if (fft_LessThan_16Ux32U_1U_4_109_out1) begin
                     if (fft_Or_1Ux1U_1U_4_104_out1) begin
                        global_state_next = 4'd06;
                     end
                     else begin
                        global_state_next = 4'd05;
                     end
                  end
                  else begin
                     global_state_next = global_state + 4'd01;
                  end
               end
               
               4'd07:                begin
                  if (input_ready_channel_valid) begin
                     global_state_next = global_state + 4'd01;
                  end
                  else begin
                     global_state_next = 4'd07;
                  end
               end
               
               4'd08:                begin
                  global_state_next = 4'd08;
               end
               
               default:                begin
                  global_state_next = global_state + 4'd01;
               end
               
            endcase

         end

         // resource: mux_1bx2i
         // resource: regr_1
         always @(posedge clk)
          begin :drive_gs_ctrl0
            if (rst == 1'b0) begin
               gs_ctrl0 <= 1'b0;
            end
            else begin
               case (global_state_next) 

                  4'd06:                   begin
                     gs_ctrl0 <= 1'b1;
                  end
                  
                  default:                   begin
                     gs_ctrl0 <= 1'b0;
                  end
                  
               endcase

            end
         end

         // resource: mux_1bx2i
         // resource: regr_1
         always @(posedge clk)
          begin :drive_gs_ctrl1
            if (rst == 1'b0) begin
               gs_ctrl1 <= 1'b0;
            end
            else begin
               case (global_state_next) 

                  4'd06:                   begin
                     gs_ctrl1 <= 1'b1;
                  end
                  
                  default:                   begin
                     gs_ctrl1 <= 1'b0;
                  end
                  
               endcase

            end
         end

         // resource: mux_1bx2i
         // resource: regr_1
         always @(posedge clk)
          begin :drive_gs_ctrl2
            if (rst == 1'b0) begin
               gs_ctrl2 <= 1'b0;
            end
            else begin
               case (global_state_next) 

                  4'd06:                   begin
                     gs_ctrl2 <= 1'b1;
                  end
                  
                  default:                   begin
                     gs_ctrl2 <= 1'b0;
                  end
                  
               endcase

            end
         end

         // resource: mux_1bx2i
         // resource: regr_1
         always @(posedge clk)
          begin :drive_input_ready_channel_valid
            if (rst == 1'b0) begin
               input_ready_channel_valid <= 1'd0;
            end
            else begin
               case (global_state1) 

                  5'd00, 5'd01:                   begin
                     if (cfg_done) begin
                        input_ready_channel_valid <= 1'd1;
                     end
                  end
                  
                  5'd02:                   begin
                     if (input_ready_channel_ready) begin
                        input_ready_channel_valid <= 1'd0;
                     end
                  end
                  
               endcase

            end
         end

         // resource: mux_1bx2i
         // resource: regr_1
         always @(posedge clk)
          begin :drive_output_ready_channel_ready
            if (rst == 1'b0) begin
               output_ready_channel_ready <= 1'd0;
            end
            else begin
               case (global_state1) 

                  5'd02:                   begin
                     if (input_ready_channel_ready && s_reg_6) begin
                        /* state28 */
                        case (s_reg_3) 

                           32'd0000000000:                            begin
                              output_ready_channel_ready <= 1'd1;
                           end
                           
                           default:                            begin
                              case (s_reg_4) 

                                 32'd0000000000:                                  begin
                                    if (fft_LessThanEQ_32Ux32U_1U_4_53_out1) begin
                                    end
                                    else begin
                                       output_ready_channel_ready <= 1'd1;
                                    end
                                 end
                                 
                                 default:                                  begin
                                    if (!fft_LessThan_1Sx32S_1U_4_56_out1 && (!fft_LessThan_32Ux32U_1U_4_58_out1 && !fft_LessThanEQ_32Ux32U_1U_4_53_out1)) begin
                                       output_ready_channel_ready <= 1'd1;
                                    end
                                 end
                                 
                              endcase

                           end
                           
                        endcase

                     end
                  end
                  
                  5'd07:                   begin
                     if (!s_reg_31 && !fft_LessThan_32Ux32U_1U_4_48_out1) begin
                        /* state27 */
                        case (s_reg_3) 

                           32'd0000000000:                            begin
                              output_ready_channel_ready <= 1'd1;
                           end
                           
                           default:                            begin
                              case (s_reg_4) 

                                 32'd0000000000:                                  begin
                                    if (fft_LessThanEQ_32Ux32U_1U_4_53_out1) begin
                                    end
                                    else begin
                                       output_ready_channel_ready <= 1'd1;
                                    end
                                 end
                                 
                                 default:                                  begin
                                    if (!fft_LessThan_1Sx32S_1U_4_56_out1 && (!fft_LessThan_32Ux32U_1U_4_58_out1 && !fft_LessThanEQ_32Ux32U_1U_4_53_out1)) begin
                                       output_ready_channel_ready <= 1'd1;
                                    end
                                 end
                                 
                              endcase

                           end
                           
                        endcase

                     end
                  end
                  
                  5'd09:                   begin
                     if (fft_LessThan_32Ux32U_1U_4_48_out1) begin
                     end
                     else begin
                        /* state29 */
                        case (s_reg_3) 

                           32'd0000000000:                            begin
                              output_ready_channel_ready <= 1'd1;
                           end
                           
                           default:                            begin
                              case (s_reg_4) 

                                 32'd0000000000:                                  begin
                                    if (fft_LessThanEQ_32Ux32U_1U_4_53_out1) begin
                                    end
                                    else begin
                                       output_ready_channel_ready <= 1'd1;
                                    end
                                 end
                                 
                                 default:                                  begin
                                    if (!fft_LessThan_1Sx32S_1U_4_56_out1 && (!fft_LessThan_32Ux32U_1U_4_58_out1 && !fft_LessThanEQ_32Ux32U_1U_4_53_out1)) begin
                                       output_ready_channel_ready <= 1'd1;
                                    end
                                 end
                                 
                              endcase

                           end
                           
                        endcase

                     end
                  end
                  
                  5'd17:                   begin
                     if (!fft_LessThan_32Sx32S_1U_4_93_out1 && (!s_reg_47 && !s_reg_43)) begin
                        output_ready_channel_ready <= 1'd1;
                     end
                  end
                  
                  5'd18:                   begin
                     if (!fft_LessThan_1Sx32S_1U_4_56_out1 && (!fft_LessThan_32Ux32U_1U_4_58_out1 && !s_reg_43)) begin
                        output_ready_channel_ready <= 1'd1;
                     end
                  end
                  
                  5'd19:                   begin
                     case (s_reg_4) 

                        32'd0000000000:                         begin
                           if (fft_LessThanEQ_32Ux32U_1U_4_53_out1) begin
                           end
                           else begin
                              output_ready_channel_ready <= 1'd1;
                           end
                        end
                        
                        default:                         begin
                           if (!fft_LessThan_1Sx32S_1U_4_56_out1 && (!fft_LessThan_32Ux32U_1U_4_58_out1 && !fft_LessThanEQ_32Ux32U_1U_4_53_out1)) begin
                              output_ready_channel_ready <= 1'd1;
                           end
                        end
                        
                     endcase

                  end
                  
                  5'd20:                   begin
                     if (output_ready_channel_valid) begin
                        output_ready_channel_ready <= 1'd0;
                     end
                  end
                  
               endcase

            end
         end

         // resource: regr_32
         always @(posedge clk)
          begin :drive_s_reg_1
            if (rst == 1'b0) begin
               s_reg_1 <= 32'd0000000000;
            end
            else begin
               case (global_state1) 

                  5'd07, 5'd09:                   begin
                     s_reg_1 <= s_reg_32;
                  end
                  
               endcase

            end
         end

         // resource: mux_25bx3i
         // resource: regr_25
         always @(posedge clk)
          begin :drive_s_reg_10
            if (rst == 1'b0) begin
               s_reg_10 <= 25'd00000000;
            end
            else begin
               case (global_state1) 

                  5'd02:                   begin
                     if (s_reg_6) begin
                     end
                     else begin
                        s_reg_10 <= s_reg_1[31:7];
                     end
                  end
                  
                  5'd04:                   begin
                     s_reg_10 <= {8'b00000000, s_reg_19_slice[23:7]};
                  end
                  
                  5'd07, 5'd09:                   begin
                     s_reg_10 <= s_reg_32[31:7];
                  end
                  
               endcase

            end
         end

         // resource: regr_1
         always @(posedge clk)
          begin :drive_s_reg_11
            if (rst == 1'b0) begin
               s_reg_11 <= 1'b0;
            end
            else begin
               case (global_state1) 

                  5'd02:                   begin
                     if (s_reg_6) begin
                     end
                     else begin
                        s_reg_11 <= fft_OrReduction_27U_1U_4_9_out1;
                     end
                  end
                  
                  5'd04, 5'd07, 5'd09:                   begin
                     s_reg_11 <= fft_OrReduction_27U_1U_4_9_out1;
                  end
                  
               endcase

            end
         end

         // resource: regr_1
         always @(posedge clk)
          begin :drive_s_reg_12
            if (rst == 1'b0) begin
               s_reg_12 <= 1'b0;
            end
            else begin
               case (global_state1) 

                  5'd02:                   begin
                     if (s_reg_6) begin
                     end
                     else begin
                        s_reg_12 <= fft_OrReduction_26U_1U_4_10_out1;
                     end
                  end
                  
                  5'd04, 5'd07, 5'd09:                   begin
                     s_reg_12 <= fft_OrReduction_26U_1U_4_10_out1;
                  end
                  
               endcase

            end
         end

         // resource: regr_1
         always @(posedge clk)
          begin :drive_s_reg_13
            if (rst == 1'b0) begin
               s_reg_13 <= 1'b0;
            end
            else begin
               case (global_state1) 

                  5'd02:                   begin
                     if (s_reg_6) begin
                     end
                     else begin
                        s_reg_13 <= fft_OrReduction_26U_1U_4_11_out1;
                     end
                  end
                  
                  5'd04, 5'd07, 5'd09:                   begin
                     s_reg_13 <= fft_OrReduction_26U_1U_4_11_out1;
                  end
                  
               endcase

            end
         end

         // resource: regr_1
         always @(posedge clk)
          begin :drive_s_reg_14
            if (rst == 1'b0) begin
               s_reg_14 <= 1'b0;
            end
            else begin
               case (global_state1) 

                  5'd02:                   begin
                     if (s_reg_6) begin
                     end
                     else begin
                        s_reg_14 <= fft_OrReduction_30U_1U_4_18_out1;
                     end
                  end
                  
                  5'd04, 5'd07, 5'd09:                   begin
                     s_reg_14 <= fft_OrReduction_30U_1U_4_18_out1;
                  end
                  
               endcase

            end
         end

         // resource: regr_32
         always @(posedge clk)
          begin :drive_s_reg_15
            if (rst == 1'b0) begin
               s_reg_15 <= 32'd0000000000;
            end
            else begin
               case (global_state1) 

                  5'd02:                   begin
                     if (s_reg_6) begin
                     end
                     else begin
                        s_reg_15 <= fft_Sub_32Sx1U_32S_4_19_out1;
                     end
                  end
                  
                  5'd04, 5'd07, 5'd09:                   begin
                     s_reg_15 <= fft_Sub_32Sx1U_32S_4_19_out1;
                  end
                  
               endcase

            end
         end

         // resource: regr_1
         always @(posedge clk)
          begin :drive_s_reg_16
            if (rst == 1'b0) begin
               s_reg_16 <= 1'b0;
            end
            else begin
               case (global_state1) 

                  5'd02:                   begin
                     if (s_reg_6) begin
                     end
                     else begin
                        s_reg_16 <= fft_OrReduction_28U_1U_4_21_out1;
                     end
                  end
                  
                  5'd04, 5'd07, 5'd09:                   begin
                     s_reg_16 <= fft_OrReduction_28U_1U_4_21_out1;
                  end
                  
               endcase

            end
         end

         // resource: regr_32
         always @(posedge clk)
          begin :drive_s_reg_17
            if (rst == 1'b0) begin
               s_reg_17 <= 32'd0000000000;
            end
            else begin
               case (global_state1) 

                  5'd02:                   begin
                     if (s_reg_6) begin
                     end
                     else begin
                        s_reg_17 <= fft_N_Mux_32_2_2_4_23_out1;
                     end
                  end
                  
                  5'd04, 5'd07, 5'd09:                   begin
                     s_reg_17 <= fft_N_Mux_32_2_2_4_23_out1;
                  end
                  
               endcase

            end
         end

         // resource: regr_32
         always @(posedge clk)
          begin :drive_s_reg_18
            if (rst == 1'b0) begin
               s_reg_18 <= 32'd0000000000;
            end
            else begin
               case (global_state1) 

                  5'd02:                   begin
                     if (s_reg_6) begin
                     end
                     else begin
                        s_reg_18 <= fft_Add_32Sx2S_32S_4_24_out1;
                     end
                  end
                  
                  5'd04, 5'd07, 5'd09:                   begin
                     s_reg_18 <= fft_Add_32Sx2S_32S_4_24_out1;
                  end
                  
               endcase

            end
         end

         // resource: mux_24bx3i
         // resource: regr_24
         always @(posedge clk)
          begin :drive_s_reg_19
            if (rst == 1'b0) begin
               s_reg_19_slice <= 24'd00000000;
            end
            else begin
               case (global_state1) 

                  5'd02:                   begin
                     if (s_reg_6) begin
                     end
                     else begin
                        s_reg_19_slice <= s_reg_1[31:8];
                     end
                  end
                  
                  5'd04:                   begin
                     s_reg_19_slice <= {8'b00000000, s_reg_19_slice[23:8]};
                  end
                  
                  5'd07, 5'd09:                   begin
                     s_reg_19_slice <= s_reg_32[31:8];
                  end
                  
               endcase

            end
         end

         // resource: regr_32
         always @(posedge clk)
          begin :drive_s_reg_2
            if (rst == 1'b0) begin
               s_reg_2 <= 32'd0000000001;
            end
            else begin
               case (global_state1) 

                  5'd02:                   begin
                     if (input_ready_channel_ready && (s_reg_6 && 32'd0000000000 != s_reg_3)) begin
                        /* state85 */
                        s_reg_2 <= fft_Add_32Ux2S_32S_4_50_out1;
                     end
                  end
                  
                  5'd07:                   begin
                     if (!s_reg_31 && (!fft_LessThan_32Ux32U_1U_4_48_out1 && 32'd0000000000 != s_reg_3)) begin
                        /* state87 */
                        s_reg_2 <= fft_Add_32Ux2S_32S_4_50_out1;
                     end
                  end
                  
                  5'd09:                   begin
                     if (!fft_LessThan_32Ux32U_1U_4_48_out1 && 32'd0000000000 != s_reg_3) begin
                        /* state90 */
                        s_reg_2 <= fft_Add_32Ux2S_32S_4_50_out1;
                     end
                  end
                  
                  5'd19:                   begin
                     /* state92 */
                     s_reg_2 <= fft_Add_32Ux2S_32S_4_50_out1;
                  end
                  
               endcase

            end
         end

         // resource: regr_1
         always @(posedge clk)
          begin :drive_s_reg_20
            if (rst == 1'b0) begin
               s_reg_20 <= 1'b0;
            end
            else begin
               s_reg_20 <= fft_LessThan_32Sx6S_1U_4_27_out1;
            end
         end

         // resource: regr_32
         always @(posedge clk)
          begin :drive_s_reg_21
            if (rst == 1'b0) begin
               s_reg_21 <= 32'd0000000000;
            end
            else begin
               s_reg_21 <= fft_Add_32Sx2S_32S_4_28_out1;
            end
         end

         // resource: regr_1
         always @(posedge clk)
          begin :drive_s_reg_22
            if (rst == 1'b0) begin
               s_reg_22 <= 1'b0;
            end
            else begin
               s_reg_22 <= fft_OrReduction_26U_1U_4_29_out1;
            end
         end

         // resource: regr_32
         always @(posedge clk)
          begin :drive_s_reg_23
            if (rst == 1'b0) begin
               s_reg_23 <= 32'd0000000000;
            end
            else begin
               s_reg_23 <= fft_Sub_32Sx1U_32S_4_36_out1;
            end
         end

         // resource: regr_32
         always @(posedge clk)
          begin :drive_s_reg_24
            if (rst == 1'b0) begin
               s_reg_24 <= 32'd0000000000;
            end
            else begin
               s_reg_24 <= fft_N_Mux_32_2_2_4_37_out1;
            end
         end

         // resource: regr_32
         always @(posedge clk)
          begin :drive_s_reg_25
            if (rst == 1'b0) begin
               s_reg_25 <= 32'd0000000000;
            end
            else begin
               s_reg_25 <= fft_N_Mux_32_2_2_4_38_out1;
            end
         end

         // resource: regr_32
         always @(posedge clk)
          begin :drive_s_reg_27
            if (rst == 1'b0) begin
               s_reg_27 <= 32'd0000000000;
            end
            else begin
               s_reg_27 <= fft_LeftShift_32Ux5U_32U_4_43_out1;
            end
         end

         // resource: regr_32
         always @(posedge clk)
          begin :drive_s_reg_28
            if (rst == 1'b0) begin
               s_reg_28 <= 32'd0000000000;
            end
            else begin
               case (global_state1) 

                  5'd05:                   begin
                     s_reg_28 <= fft_RightShift_32Ux5U_32U_4_45_out1;
                  end
                  
               endcase

            end
         end

         // resource: regr_64
         always @(posedge clk)
          begin :drive_s_reg_29
            if (rst == 1'b0) begin
               s_reg_29 <= 64'd00000000000000000000;
            end
            else begin
               case (global_state1) 

                  5'd05:                   begin
                     s_reg_29 <= hi_A0_1_Q3;
                  end
                  
               endcase

            end
         end

         // resource: regr_32
         always @(posedge clk)
          begin :drive_s_reg_3
            if (rst == 1'b0) begin
               s_reg_3 <= 32'd0000000000;
            end
            else begin
               case (global_state1) 

                  5'd00, 5'd01:                   begin
                     s_reg_3 <= conf_info_log_len;
                  end
                  
               endcase

            end
         end

         // resource: regr_64
         always @(posedge clk)
          begin :drive_s_reg_30
            if (rst == 1'b0) begin
               s_reg_30 <= 64'd00000000000000000000;
            end
            else begin
               case (global_state1) 

                  5'd05:                   begin
                     s_reg_30 <= hi_A0_1_Q2;
                  end
                  
               endcase

            end
         end

         // resource: regr_1
         always @(posedge clk)
          begin :drive_s_reg_31
            if (rst == 1'b0) begin
               s_reg_31 <= 1'b0;
            end
            else begin
               s_reg_31 <= fft_LessThan_32Ux32U_1U_4_46_out1;
            end
         end

         // resource: regr_32
         always @(posedge clk)
          begin :drive_s_reg_32
            if (rst == 1'b0) begin
               s_reg_32 <= 32'd0000000000;
            end
            else begin
               case (global_state1) 

                  5'd06:                   begin
                     s_reg_32 <= fft_Add_32Ux2S_32S_4_47_out1;
                  end
                  
               endcase

            end
         end

         // resource: regr_64
         always @(posedge clk)
          begin :drive_s_reg_33
            if (rst == 1'b0) begin
               s_reg_33 <= 64'd00000000000000000000;
            end
            else begin
               s_reg_33 <= hi_A0_1_Q3;
            end
         end

         // resource: regr_64
         always @(posedge clk)
          begin :drive_s_reg_34
            if (rst == 1'b0) begin
               s_reg_34 <= 64'd00000000000000000000;
            end
            else begin
               s_reg_34 <= hi_A0_1_Q2;
            end
         end

         // resource: regr_14
         always @(posedge clk)
          begin :drive_s_reg_35
            if (rst == 1'b0) begin
               s_reg_35_slice <= 14'd00000;
            end
            else begin
               s_reg_35_slice <= s_reg_1[13:0];
            end
         end

         // resource: regr_15
         always @(posedge clk)
          begin :drive_s_reg_36
            if (rst == 1'b0) begin
               s_reg_36 <= 15'd00000;
            end
            else begin
               s_reg_36 <= {s_reg_1[13:0], 1'b1};
            end
         end

         // resource: regr_14
         always @(posedge clk)
          begin :drive_s_reg_37
            if (rst == 1'b0) begin
               s_reg_37_slice <= 14'd00000;
            end
            else begin
               case (global_state1) 

                  5'd07:                   begin
                     s_reg_37_slice <= s_reg_28[13:0];
                  end
                  
               endcase

            end
         end

         // resource: regr_15
         always @(posedge clk)
          begin :drive_s_reg_38
            if (rst == 1'b0) begin
               s_reg_38 <= 15'd00000;
            end
            else begin
               case (global_state1) 

                  5'd07:                   begin
                     s_reg_38 <= {s_reg_28[13:0], 1'b1};
                  end
                  
               endcase

            end
         end

         // resource: regr_32
         always @(posedge clk)
          begin :drive_s_reg_39
            if (rst == 1'b0) begin
               s_reg_39 <= 32'd0000000000;
            end
            else begin
               case (global_state1) 

                  5'd02, 5'd07, 5'd09:                   begin
                     if (32'd0000000000 != s_reg_3 && 32'd0000000000 != s_reg_4) begin
                        s_reg_39 <= fft_LeftShift_2Sx5U_32S_4_49_out1;
                     end
                  end
                  
                  5'd19:                   begin
                     if (32'd0000000000 != s_reg_4) begin
                        s_reg_39 <= fft_LeftShift_2Sx5U_32S_4_49_out1;
                     end
                  end
                  
               endcase

            end
         end

         // resource: regr_32
         always @(posedge clk)
          begin :drive_s_reg_4
            if (rst == 1'b0) begin
               s_reg_4 <= 32'd0000000000;
            end
            else begin
               case (global_state1) 

                  5'd00, 5'd01:                   begin
                     s_reg_4 <= fft_LeftShift_2Sx5U_32S_4_1_out1;
                  end
                  
               endcase

            end
         end

         // resource: regr_22
         always @(posedge clk)
          begin :drive_s_reg_41
            if (rst == 1'b0) begin
               s_reg_41_slice <= 22'd0000000;
            end
            else begin
               case (global_state1) 

                  5'd02, 5'd07, 5'd09:                   begin
                     if (32'd0000000000 != s_reg_3 && 32'd0000000000 != s_reg_4) begin
                        s_reg_41_slice <= fft_N_Mux_24_14_3_4_51_out1_slice;
                     end
                  end
                  
                  5'd19:                   begin
                     if (32'd0000000000 != s_reg_4) begin
                        s_reg_41_slice <= fft_N_Mux_24_14_3_4_51_out1_slice;
                     end
                  end
                  
               endcase

            end
         end

         // resource: regr_23
         always @(posedge clk)
          begin :drive_s_reg_42
            if (rst == 1'b0) begin
               s_reg_42 <= 23'd0000000;
            end
            else begin
               case (global_state1) 

                  5'd02, 5'd07, 5'd09:                   begin
                     if (32'd0000000000 != s_reg_3 && 32'd0000000000 != s_reg_4) begin
                        s_reg_42 <= fft_N_Mux_23_16_4_4_52_out1;
                     end
                  end
                  
                  5'd19:                   begin
                     if (32'd0000000000 != s_reg_4) begin
                        s_reg_42 <= fft_N_Mux_23_16_4_4_52_out1;
                     end
                  end
                  
               endcase

            end
         end

         // resource: regr_1
         always @(posedge clk)
          begin :drive_s_reg_43
            if (rst == 1'b0) begin
               s_reg_43 <= 1'b0;
            end
            else begin
               case (global_state1) 

                  5'd02, 5'd07, 5'd09:                   begin
                     if (32'd0000000000 != s_reg_3 && 32'd0000000000 != s_reg_4) begin
                        s_reg_43 <= fft_LessThanEQ_32Ux32U_1U_4_53_out1;
                     end
                  end
                  
                  5'd19:                   begin
                     if (32'd0000000000 != s_reg_4) begin
                        s_reg_43 <= fft_LessThanEQ_32Ux32U_1U_4_53_out1;
                     end
                  end
                  
               endcase

            end
         end

         // resource: regr_32
         always @(posedge clk)
          begin :drive_s_reg_44
            if (rst == 1'b0) begin
               s_reg_44 <= 32'd0000000000;
            end
            else begin
               case (global_state1) 

                  5'd02, 5'd07, 5'd09:                   begin
                     if (32'd0000000000 != s_reg_3 && 32'd0000000000 != s_reg_4) begin
                        s_reg_44 <= fft_Add_31Sx1U_32S_4_55_out1;
                     end
                  end
                  
                  5'd18:                   begin
                     s_reg_44 <= fft_Add_31Sx1U_32S_4_55_out1;
                  end
                  
                  5'd19:                   begin
                     if (32'd0000000000 != s_reg_4) begin
                        s_reg_44 <= fft_Add_31Sx1U_32S_4_55_out1;
                     end
                  end
                  
               endcase

            end
         end

         // resource: mux_32bx2i
         // resource: regr_32
         always @(posedge clk)
          begin :drive_s_reg_45
            if (rst == 1'b0) begin
               s_reg_45 <= 32'd0000000000;
            end
            else begin
               case (global_state1) 

                  5'd02, 5'd07, 5'd09:                   begin
                     if (32'd0000000000 != s_reg_3 && 32'd0000000000 != s_reg_4) begin
                        s_reg_45 <= 32'd0000000000;
                     end
                  end
                  
                  5'd18:                   begin
                     s_reg_45 <= s_reg_46;
                  end
                  
                  5'd19:                   begin
                     if (32'd0000000000 != s_reg_4) begin
                        s_reg_45 <= 32'd0000000000;
                     end
                  end
                  
               endcase

            end
         end

         // resource: regr_32
         always @(posedge clk)
          begin :drive_s_reg_46
            if (rst == 1'b0) begin
               s_reg_46 <= 32'd0000000000;
            end
            else begin
               case (global_state1) 

                  5'd02, 5'd07, 5'd09:                   begin
                     if (32'd0000000000 != s_reg_3 && 32'd0000000000 != s_reg_4) begin
                        s_reg_46 <= fft_Add_32Ux32U_32U_4_57_out1;
                     end
                  end
                  
                  5'd18:                   begin
                     s_reg_46 <= fft_Add_32Ux32U_32U_4_57_out1;
                  end
                  
                  5'd19:                   begin
                     if (32'd0000000000 != s_reg_4) begin
                        s_reg_46 <= fft_Add_32Ux32U_32U_4_57_out1;
                     end
                  end
                  
               endcase

            end
         end

         // resource: regr_1
         always @(posedge clk)
          begin :drive_s_reg_47
            if (rst == 1'b0) begin
               s_reg_47 <= 1'b0;
            end
            else begin
               case (global_state1) 

                  5'd02, 5'd07, 5'd09:                   begin
                     if (32'd0000000000 != s_reg_3 && 32'd0000000000 != s_reg_4) begin
                        s_reg_47 <= fft_LessThan_32Ux32U_1U_4_58_out1;
                     end
                  end
                  
                  5'd18:                   begin
                     s_reg_47 <= fft_LessThan_32Ux32U_1U_4_58_out1;
                  end
                  
                  5'd19:                   begin
                     if (32'd0000000000 != s_reg_4) begin
                        s_reg_47 <= fft_LessThan_32Ux32U_1U_4_58_out1;
                     end
                  end
                  
               endcase

            end
         end

         // resource: mux_64bx2i
         // resource: regr_64
         always @(posedge clk)
          begin :drive_s_reg_48
            if (rst == 1'b0) begin
               s_reg_48 <= 64'd00000000000000000000;
            end
            else begin
               case (global_state1) 

                  5'd02, 5'd07, 5'd09:                   begin
                     if (32'd0000000000 != s_reg_3 && 32'd0000000000 != s_reg_4) begin
                        s_reg_48 <= 64'd00000000000004194304;
                     end
                  end
                  
                  5'd17:                   begin
                     s_reg_48 <= fft_Add_64Sx1U_64S_4_91_out1;
                  end
                  
                  5'd18:                   begin
                     s_reg_48 <= 64'd00000000000004194304;
                  end
                  
                  5'd19:                   begin
                     if (32'd0000000000 != s_reg_4) begin
                        s_reg_48 <= 64'd00000000000004194304;
                     end
                  end
                  
               endcase

            end
         end

         // resource: mux_64bx2i
         // resource: regr_64
         always @(posedge clk)
          begin :drive_s_reg_49
            if (rst == 1'b0) begin
               s_reg_49 <= 64'd00000000000000000000;
            end
            else begin
               case (global_state1) 

                  5'd02, 5'd07, 5'd09:                   begin
                     if (32'd0000000000 != s_reg_3 && 32'd0000000000 != s_reg_4) begin
                        s_reg_49 <= 64'd00000000000000000000;
                     end
                  end
                  
                  5'd17:                   begin
                     s_reg_49 <= fft_Add_64Sx1U_64S_4_92_out1;
                  end
                  
                  5'd18:                   begin
                     s_reg_49 <= 64'd00000000000000000000;
                  end
                  
                  5'd19:                   begin
                     if (32'd0000000000 != s_reg_4) begin
                        s_reg_49 <= 64'd00000000000000000000;
                     end
                  end
                  
               endcase

            end
         end

         // resource: regr_32
         always @(posedge clk)
          begin :drive_s_reg_5
            if (rst == 1'b0) begin
               s_reg_5 <= 32'd0000000000;
            end
            else begin
               case (global_state1) 

                  5'd00, 5'd01:                   begin
                     s_reg_5 <= fft_LeftShift_2Sx5U_32S_4_1_out1;
                  end
                  
               endcase

            end
         end

         // resource: mux_32bx2i
         // resource: regr_32
         always @(posedge clk)
          begin :drive_s_reg_50
            if (rst == 1'b0) begin
               s_reg_50 <= 32'd0000000000;
            end
            else begin
               case (global_state1) 

                  5'd02, 5'd07, 5'd09:                   begin
                     if (32'd0000000000 != s_reg_3 && 32'd0000000000 != s_reg_4) begin
                        s_reg_50 <= 32'd0000000000;
                     end
                  end
                  
                  5'd17:                   begin
                     s_reg_50 <= s_reg_55;
                  end
                  
                  5'd18:                   begin
                     s_reg_50 <= 32'd0000000000;
                  end
                  
                  5'd19:                   begin
                     if (32'd0000000000 != s_reg_4) begin
                        s_reg_50 <= 32'd0000000000;
                     end
                  end
                  
               endcase

            end
         end

         // resource: regr_14
         always @(posedge clk)
          begin :drive_s_reg_51
            if (rst == 1'b0) begin
               s_reg_51 <= 14'd00000;
            end
            else begin
               case (global_state1) 

                  5'd02, 5'd07, 5'd09:                   begin
                     if (32'd0000000000 != s_reg_3 && 32'd0000000000 != s_reg_4) begin
                        s_reg_51 <= fft_Add_14Ux14U_14U_4_59_out1;
                     end
                  end
                  
                  5'd17, 5'd18:                   begin
                     s_reg_51 <= fft_Add_14Ux14U_14U_4_59_out1;
                  end
                  
                  5'd19:                   begin
                     if (32'd0000000000 != s_reg_4) begin
                        s_reg_51 <= fft_Add_14Ux14U_14U_4_59_out1;
                     end
                  end
                  
               endcase

            end
         end

         // resource: regr_14
         always @(posedge clk)
          begin :drive_s_reg_52
            if (rst == 1'b0) begin
               s_reg_52 <= 14'd00000;
            end
            else begin
               case (global_state1) 

                  5'd10:                   begin
                     s_reg_52 <= fft_Add_14Ux14U_14U_4_60_out1;
                  end
                  
               endcase

            end
         end

         // resource: regr_86
         always @(posedge clk)
          begin :drive_s_reg_53
            if (rst == 1'b0) begin
               s_reg_53 <= 86'd00000000000000000000000000;
            end
            else begin
               s_reg_53 <= fft_Add_86Ux86U_86U_4_65_out1;
            end
         end

         // resource: regr_86
         always @(posedge clk)
          begin :drive_s_reg_54
            if (rst == 1'b0) begin
               s_reg_54 <= 86'd00000000000000000000000000;
            end
            else begin
               s_reg_54 <= fft_Sub_86Ux86U_86U_4_66_out1;
            end
         end

         // resource: regr_32
         always @(posedge clk)
          begin :drive_s_reg_55
            if (rst == 1'b0) begin
               s_reg_55 <= 32'd0000000000;
            end
            else begin
               case (global_state1) 

                  5'd10:                   begin
                     s_reg_55 <= fft_Add_32Sx2S_32S_4_67_out1;
                  end
                  
               endcase

            end
         end

         // resource: regr_14
         always @(posedge clk)
          begin :drive_s_reg_56
            if (rst == 1'b0) begin
               s_reg_56 <= 14'd00000;
            end
            else begin
               case (global_state1) 

                  5'd10:                   begin
                     s_reg_56 <= fft_Add_14Ux14U_14U_4_68_out1;
                  end
                  
               endcase

            end
         end

         // resource: regr_65
         always @(posedge clk)
          begin :drive_s_reg_57
            if (rst == 1'b0) begin
               s_reg_57 <= 65'd00000000000000000000;
            end
            else begin
               case (global_state1) 

                  5'd11:                   begin
                     s_reg_57 <= fft_Sub_86Ux86U_86U_4_69_out1[85:21];
                  end
                  
               endcase

            end
         end

         // resource: regr_65
         always @(posedge clk)
          begin :drive_s_reg_58
            if (rst == 1'b0) begin
               s_reg_58 <= 65'd00000000000000000000;
            end
            else begin
               case (global_state1) 

                  5'd11:                   begin
                     s_reg_58 <= fft_Add_86Ux86U_86U_4_70_out1[85:21];
                  end
                  
               endcase

            end
         end

         // resource: regr_64
         always @(posedge clk)
          begin :drive_s_reg_59
            if (rst == 1'b0) begin
               s_reg_59 <= 64'd00000000000000000000;
            end
            else begin
               s_reg_59 <= hi_A0_1_Q3;
            end
         end

         // resource: regr_1
         always @(posedge clk)
          begin :drive_s_reg_6
            if (rst == 1'b0) begin
               s_reg_6 <= 1'b0;
            end
            else begin
               case (global_state1) 

                  5'd00, 5'd01:                   begin
                     s_reg_6 <= fft_N_Mux_1_2_1_4_5_out1;
                  end
                  
               endcase

            end
         end

         // resource: regr_64
         always @(posedge clk)
          begin :drive_s_reg_60
            if (rst == 1'b0) begin
               s_reg_60 <= 64'd00000000000000000000;
            end
            else begin
               s_reg_60 <= hi_A0_1_Q2;
            end
         end

         // resource: regr_64
         always @(posedge clk)
          begin :drive_s_reg_61
            if (rst == 1'b0) begin
               s_reg_61 <= 64'd00000000000000000000;
            end
            else begin
               s_reg_61 <= hi_A0_1_Q3;
            end
         end

         // resource: regr_64
         always @(posedge clk)
          begin :drive_s_reg_62
            if (rst == 1'b0) begin
               s_reg_62 <= 64'd00000000000000000000;
            end
            else begin
               s_reg_62 <= hi_A0_1_Q2;
            end
         end

         // resource: regr_65
         always @(posedge clk)
          begin :drive_s_reg_63
            if (rst == 1'b0) begin
               s_reg_63 <= 65'd00000000000000000000;
            end
            else begin
               s_reg_63 <= fft_Add_86Ux86U_86U_4_78_out1[85:21];
            end
         end

         // resource: regr_64
         always @(posedge clk)
          begin :drive_s_reg_64
            if (rst == 1'b0) begin
               s_reg_64 <= 64'd00000000000000000000;
            end
            else begin
               s_reg_64 <= fft_Add_64Sx1U_64S_4_79_out1;
            end
         end

         // resource: regr_64
         always @(posedge clk)
          begin :drive_s_reg_65
            if (rst == 1'b0) begin
               s_reg_65 <= 64'd00000000000000000000;
            end
            else begin
               s_reg_65 <= fft_Add_64Ux64U_64U_4_83_out1;
            end
         end

         // resource: regr_64
         always @(posedge clk)
          begin :drive_s_reg_66
            if (rst == 1'b0) begin
               s_reg_66 <= 64'd00000000000000000000;
            end
            else begin
               s_reg_66 <= fft_Add_64Ux64U_64U_4_84_out1;
            end
         end

         // resource: regr_64
         always @(posedge clk)
          begin :drive_s_reg_67
            if (rst == 1'b0) begin
               s_reg_67 <= 64'd00000000000000000000;
            end
            else begin
               case (global_state1) 

                  5'd15:                   begin
                     s_reg_67 <= fft_Sub_64Ux64U_64U_4_85_out1;
                  end
                  
               endcase

            end
         end

         // resource: regr_64
         always @(posedge clk)
          begin :drive_s_reg_68
            if (rst == 1'b0) begin
               s_reg_68 <= 64'd00000000000000000000;
            end
            else begin
               case (global_state1) 

                  5'd15:                   begin
                     s_reg_68 <= fft_Sub_64Ux64U_64U_4_86_out1;
                  end
                  
               endcase

            end
         end

         // resource: mux_27bx3i
         // resource: regr_27
         always @(posedge clk)
          begin :drive_s_reg_8
            if (rst == 1'b0) begin
               s_reg_8 <= 27'd000000000;
            end
            else begin
               case (global_state1) 

                  5'd02:                   begin
                     if (s_reg_6) begin
                     end
                     else begin
                        s_reg_8 <= s_reg_1[31:5];
                     end
                  end
                  
                  5'd04:                   begin
                     s_reg_8 <= {8'b00000000, s_reg_19_slice[23:5]};
                  end
                  
                  5'd07, 5'd09:                   begin
                     s_reg_8 <= s_reg_32[31:5];
                  end
                  
               endcase

            end
         end

         // resource: mux_26bx3i
         // resource: regr_26
         always @(posedge clk)
          begin :drive_s_reg_9
            if (rst == 1'b0) begin
               s_reg_9 <= 26'd00000000;
            end
            else begin
               case (global_state1) 

                  5'd02:                   begin
                     if (s_reg_6) begin
                     end
                     else begin
                        s_reg_9 <= s_reg_1[31:6];
                     end
                  end
                  
                  5'd04:                   begin
                     s_reg_9 <= {8'b00000000, s_reg_19_slice[23:6]};
                  end
                  
                  5'd07, 5'd09:                   begin
                     s_reg_9 <= s_reg_32[31:6];
                  end
                  
               endcase

            end
         end

         // resource: fft_LeftShift_2Sx5U_32S_4  instance: fft_LeftShift_2Sx5U_32S_4_1
         assign fft_LeftShift_2Sx5U_32S_4_1_out1 = 32'd0000000001 << conf_info_log_len[4:0];

         // resource: fft_OrReduction_32S_1U_4  instance: fft_OrReduction_32S_1U_4_2
         assign fft_OrReduction_32S_1U_4_2_out1 = (|fft_LeftShift_2Sx5U_32S_4_1_out1);

         // resource: fft_OrReduction_32S_1U_4  instance: fft_OrReduction_32S_1U_4_3
         assign fft_OrReduction_32S_1U_4_3_out1 = (|conf_info_do_bitrev);

         // resource: fft_Not_1U_1U_4  instance: fft_Not_1U_1U_4_4
         assign fft_Not_1U_1U_4_4_out1 = !fft_OrReduction_32S_1U_4_2_out1;

         // resource:fft_N_Mux_1_2_1_4
         always @(fft_OrReduction_32S_1U_4_3_out1 or fft_Not_1U_1U_4_4_out1)
          begin :fft_N_Mux_1_2_1_4_5
            if (fft_OrReduction_32S_1U_4_3_out1) begin
               fft_N_Mux_1_2_1_4_5_out1 = fft_Not_1U_1U_4_4_out1;
            end
            else begin
               fft_N_Mux_1_2_1_4_5_out1 = 1'b1;
            end
         end

         // resource: mux_30bx3i
         always @(s_reg_1[31:2] or s_reg_32[31:2] or gs_ctrl3 or s_reg_19_slice[23:2])
          begin :drive_fft_OrReduction_30U_1U_4_6_in1
            case (gs_ctrl3) 

               2'd1:                begin
                  fft_OrReduction_30U_1U_4_6_in1 = {8'b00000000, s_reg_19_slice[23:2]};
               end
               
               2'd2:                begin
                  fft_OrReduction_30U_1U_4_6_in1 = s_reg_32[31:2];
               end
               
               default:                begin
                  fft_OrReduction_30U_1U_4_6_in1 = s_reg_1[31:2];
               end
               
            endcase

         end

         // resource: fft_OrReduction_30U_1U_4  instance: fft_OrReduction_30U_1U_4_6
         assign fft_OrReduction_30U_1U_4_6_out1 = (|fft_OrReduction_30U_1U_4_6_in1);

         // resource: mux_29bx3i
         always @(s_reg_1[31:3] or s_reg_32[31:3] or gs_ctrl4 or s_reg_19_slice[23:3])
          begin :drive_fft_OrReduction_30U_1U_4_7_in1
            case (gs_ctrl4) 

               2'd1:                begin
                  fft_OrReduction_30U_1U_4_7_in1_slice = {8'b00000000, s_reg_19_slice[23:3]};
               end
               
               2'd2:                begin
                  fft_OrReduction_30U_1U_4_7_in1_slice = s_reg_32[31:3];
               end
               
               default:                begin
                  fft_OrReduction_30U_1U_4_7_in1_slice = s_reg_1[31:3];
               end
               
            endcase

         end

         // resource: fft_OrReduction_30U_1U_4  instance: fft_OrReduction_30U_1U_4_7
         assign fft_OrReduction_30U_1U_4_7_out1 = (|{1'b0, fft_OrReduction_30U_1U_4_7_in1_slice});

         // resource: mux_28bx3i
         always @(s_reg_1[31:4] or s_reg_32[31:4] or gs_ctrl5 or s_reg_19_slice[23:4])
          begin :drive_fft_OrReduction_28U_1U_4_8_in1
            case (gs_ctrl5) 

               2'd1:                begin
                  fft_OrReduction_28U_1U_4_8_in1 = {8'b00000000, s_reg_19_slice[23:4]};
               end
               
               2'd2:                begin
                  fft_OrReduction_28U_1U_4_8_in1 = s_reg_32[31:4];
               end
               
               default:                begin
                  fft_OrReduction_28U_1U_4_8_in1 = s_reg_1[31:4];
               end
               
            endcase

         end

         // resource: fft_OrReduction_28U_1U_4  instance: fft_OrReduction_28U_1U_4_8
         assign fft_OrReduction_28U_1U_4_8_out1 = (|fft_OrReduction_28U_1U_4_8_in1);

         // resource: mux_27bx3i
         always @(s_reg_1[31:5] or s_reg_32[31:5] or gs_ctrl6 or s_reg_19_slice[23:5])
          begin :drive_fft_OrReduction_27U_1U_4_9_in1
            case (gs_ctrl6) 

               2'd1:                begin
                  fft_OrReduction_27U_1U_4_9_in1 = {8'b00000000, s_reg_19_slice[23:5]};
               end
               
               2'd2:                begin
                  fft_OrReduction_27U_1U_4_9_in1 = s_reg_32[31:5];
               end
               
               default:                begin
                  fft_OrReduction_27U_1U_4_9_in1 = s_reg_1[31:5];
               end
               
            endcase

         end

         // resource: fft_OrReduction_27U_1U_4  instance: fft_OrReduction_27U_1U_4_9
         assign fft_OrReduction_27U_1U_4_9_out1 = (|fft_OrReduction_27U_1U_4_9_in1);

         // resource: mux_26bx3i
         always @(s_reg_1[31:6] or s_reg_32[31:6] or gs_ctrl7 or s_reg_19_slice[23:6])
          begin :drive_fft_OrReduction_26U_1U_4_10_in1
            case (gs_ctrl7) 

               2'd1:                begin
                  fft_OrReduction_26U_1U_4_10_in1 = {8'b00000000, s_reg_19_slice[23:6]};
               end
               
               2'd2:                begin
                  fft_OrReduction_26U_1U_4_10_in1 = s_reg_32[31:6];
               end
               
               default:                begin
                  fft_OrReduction_26U_1U_4_10_in1 = s_reg_1[31:6];
               end
               
            endcase

         end

         // resource: fft_OrReduction_26U_1U_4  instance: fft_OrReduction_26U_1U_4_10
         assign fft_OrReduction_26U_1U_4_10_out1 = (|fft_OrReduction_26U_1U_4_10_in1);

         // resource: mux_25bx3i
         always @(s_reg_1[31:7] or s_reg_32[31:7] or gs_ctrl8 or s_reg_19_slice[23:7])
          begin :drive_fft_OrReduction_26U_1U_4_11_in1
            case (gs_ctrl8) 

               2'd1:                begin
                  fft_OrReduction_26U_1U_4_11_in1_slice = {8'b00000000, s_reg_19_slice[23:7]};
               end
               
               2'd2:                begin
                  fft_OrReduction_26U_1U_4_11_in1_slice = s_reg_32[31:7];
               end
               
               default:                begin
                  fft_OrReduction_26U_1U_4_11_in1_slice = s_reg_1[31:7];
               end
               
            endcase

         end

         // resource: fft_OrReduction_26U_1U_4  instance: fft_OrReduction_26U_1U_4_11
         assign fft_OrReduction_26U_1U_4_11_out1 = (|{1'b0, fft_OrReduction_26U_1U_4_11_in1_slice});

         // resource: mux_31bx3i
         always @(s_reg_1[31:1] or s_reg_32[31:1] or gs_ctrl9 or s_reg_19_slice[23:1])
          begin :drive_fft_OrReduction_31U_1U_4_12_in1
            case (gs_ctrl9) 

               2'd1:                begin
                  fft_OrReduction_31U_1U_4_12_in1 = {8'b00000000, s_reg_19_slice[23:1]};
               end
               
               2'd2:                begin
                  fft_OrReduction_31U_1U_4_12_in1 = s_reg_32[31:1];
               end
               
               default:                begin
                  fft_OrReduction_31U_1U_4_12_in1 = s_reg_1[31:1];
               end
               
            endcase

         end

         // resource: fft_OrReduction_31U_1U_4  instance: fft_OrReduction_31U_1U_4_12
         assign fft_OrReduction_31U_1U_4_12_out1 = (|fft_OrReduction_31U_1U_4_12_in1);

         // resource: mux_31bx3i
         always @(s_reg_1[31:1] or s_reg_32[31:1] or gs_ctrl10 or s_reg_19_slice[23:1])
          begin :drive_fft_OrReduction_31U_1U_4_13_in1
            case (gs_ctrl10) 

               2'd1:                begin
                  fft_OrReduction_31U_1U_4_13_in1 = {8'b00000000, s_reg_19_slice[23:1]};
               end
               
               2'd2:                begin
                  fft_OrReduction_31U_1U_4_13_in1 = s_reg_32[31:1];
               end
               
               default:                begin
                  fft_OrReduction_31U_1U_4_13_in1 = s_reg_1[31:1];
               end
               
            endcase

         end

         // resource: fft_OrReduction_31U_1U_4  instance: fft_OrReduction_31U_1U_4_13
         assign fft_OrReduction_31U_1U_4_13_out1 = (|fft_OrReduction_31U_1U_4_13_in1);

         // resource: mux_32bx3i
         always @(s_reg_1 or s_reg_25 or s_reg_32 or gs_ctrl11)
          begin :drive_fft_N_Mux_32_2_2_4_14_in3
            case (gs_ctrl11) 

               2'd1:                begin
                  fft_N_Mux_32_2_2_4_14_in3 = s_reg_25;
               end
               
               2'd2:                begin
                  fft_N_Mux_32_2_2_4_14_in3 = s_reg_32;
               end
               
               default:                begin
                  fft_N_Mux_32_2_2_4_14_in3 = s_reg_1;
               end
               
            endcase

         end

         // resource: mux_32bx3i
         always @(s_reg_1[30:0] or s_reg_25[30:0] or s_reg_32[30:0] or gs_ctrl12 or s_reg_19_slice[1])
          begin :drive_fft_N_Mux_32_2_2_4_14_in2
            case (gs_ctrl12) 

               2'd1:                begin
                  fft_N_Mux_32_2_2_4_14_in2 = {s_reg_25[30:0], s_reg_19_slice[1]};
               end
               
               2'd2:                begin
                  fft_N_Mux_32_2_2_4_14_in2 = {s_reg_32[30:0], s_reg_32[1]};
               end
               
               default:                begin
                  fft_N_Mux_32_2_2_4_14_in2 = {s_reg_1[30:0], s_reg_1[1]};
               end
               
            endcase

         end

         // resource:fft_N_Mux_32_2_2_4
         always @(fft_OrReduction_31U_1U_4_12_out1 or fft_N_Mux_32_2_2_4_14_in3 or fft_N_Mux_32_2_2_4_14_in2)
          begin :fft_N_Mux_32_2_2_4_14
            if (fft_OrReduction_31U_1U_4_12_out1) begin
               fft_N_Mux_32_2_2_4_14_out1 = fft_N_Mux_32_2_2_4_14_in2;
            end
            else begin
               fft_N_Mux_32_2_2_4_14_out1 = fft_N_Mux_32_2_2_4_14_in3;
            end
         end

         // resource: mux_30bx3i
         always @(s_reg_1[31:2] or s_reg_32[31:2] or gs_ctrl13 or s_reg_19_slice[23:2])
          begin :drive_fft_OrReduction_30U_1U_4_15_in1
            case (gs_ctrl13) 

               2'd1:                begin
                  fft_OrReduction_30U_1U_4_15_in1 = {8'b00000000, s_reg_19_slice[23:2]};
               end
               
               2'd2:                begin
                  fft_OrReduction_30U_1U_4_15_in1 = s_reg_32[31:2];
               end
               
               default:                begin
                  fft_OrReduction_30U_1U_4_15_in1 = s_reg_1[31:2];
               end
               
            endcase

         end

         // resource: fft_OrReduction_30U_1U_4  instance: fft_OrReduction_30U_1U_4_15
         assign fft_OrReduction_30U_1U_4_15_out1 = (|fft_OrReduction_30U_1U_4_15_in1);

         // resource: mux_32bx2i
         always @(fft_Sub_32Sx1U_32S_4_41_out1 or gs_ctrl14)
          begin :drive_fft_Sub_32Sx1U_32S_4_16_in2
            if (gs_ctrl14) begin
               fft_Sub_32Sx1U_32S_4_16_in2 = fft_Sub_32Sx1U_32S_4_41_out1;
            end
            else begin
               fft_Sub_32Sx1U_32S_4_16_in2 = 32'd4294967295;
            end
         end

         // resource: fft_Sub_32Sx1U_32S_4  instance: fft_Sub_32Sx1U_32S_4_16
         assign fft_Sub_32Sx1U_32S_4_16_out1 = fft_Sub_32Sx1U_32S_4_16_in2 - {31'b0000000000000000000000000000000, fft_OrReduction_31U_1U_4_13_out1};

         // resource: mux_32bx3i
         always @(s_reg_1[2] or s_reg_32[2] or fft_N_Mux_32_2_2_4_14_out1[30:0] or gs_ctrl15 or s_reg_19_slice[2])
          begin :drive_fft_N_Mux_32_2_2_4_17_in2
            case (gs_ctrl15) 

               2'd1:                begin
                  fft_N_Mux_32_2_2_4_17_in2 = {fft_N_Mux_32_2_2_4_14_out1[30:0], s_reg_19_slice[2]};
               end
               
               2'd2:                begin
                  fft_N_Mux_32_2_2_4_17_in2 = {fft_N_Mux_32_2_2_4_14_out1[30:0], s_reg_32[2]};
               end
               
               default:                begin
                  fft_N_Mux_32_2_2_4_17_in2 = {fft_N_Mux_32_2_2_4_14_out1[30:0], s_reg_1[2]};
               end
               
            endcase

         end

         // resource:fft_N_Mux_32_2_2_4
         always @(fft_OrReduction_30U_1U_4_6_out1 or fft_N_Mux_32_2_2_4_14_out1 or fft_N_Mux_32_2_2_4_17_in2)
          begin :fft_N_Mux_32_2_2_4_17
            if (fft_OrReduction_30U_1U_4_6_out1) begin
               fft_N_Mux_32_2_2_4_17_out1 = fft_N_Mux_32_2_2_4_17_in2;
            end
            else begin
               fft_N_Mux_32_2_2_4_17_out1 = fft_N_Mux_32_2_2_4_14_out1;
            end
         end

         // resource: mux_29bx3i
         always @(s_reg_1[31:3] or s_reg_32[31:3] or gs_ctrl16 or s_reg_19_slice[23:3])
          begin :drive_fft_OrReduction_30U_1U_4_18_in1
            case (gs_ctrl16) 

               2'd1:                begin
                  fft_OrReduction_30U_1U_4_18_in1_slice = {8'b00000000, s_reg_19_slice[23:3]};
               end
               
               2'd2:                begin
                  fft_OrReduction_30U_1U_4_18_in1_slice = s_reg_32[31:3];
               end
               
               default:                begin
                  fft_OrReduction_30U_1U_4_18_in1_slice = s_reg_1[31:3];
               end
               
            endcase

         end

         // resource: fft_OrReduction_30U_1U_4  instance: fft_OrReduction_30U_1U_4_18
         assign fft_OrReduction_30U_1U_4_18_out1 = (|{1'b0, fft_OrReduction_30U_1U_4_18_in1_slice});

         // resource: fft_Sub_32Sx1U_32S_4  instance: fft_Sub_32Sx1U_32S_4_19
         assign fft_Sub_32Sx1U_32S_4_19_out1 = fft_Sub_32Sx1U_32S_4_16_out1 - {31'b0000000000000000000000000000000, fft_OrReduction_30U_1U_4_15_out1};

         // resource: mux_32bx3i
         always @(s_reg_1[3] or s_reg_32[3] or fft_N_Mux_32_2_2_4_17_out1[30:0] or gs_ctrl17 or s_reg_19_slice[3])
          begin :drive_fft_N_Mux_32_2_2_4_20_in2
            case (gs_ctrl17) 

               2'd1:                begin
                  fft_N_Mux_32_2_2_4_20_in2 = {fft_N_Mux_32_2_2_4_17_out1[30:0], s_reg_19_slice[3]};
               end
               
               2'd2:                begin
                  fft_N_Mux_32_2_2_4_20_in2 = {fft_N_Mux_32_2_2_4_17_out1[30:0], s_reg_32[3]};
               end
               
               default:                begin
                  fft_N_Mux_32_2_2_4_20_in2 = {fft_N_Mux_32_2_2_4_17_out1[30:0], s_reg_1[3]};
               end
               
            endcase

         end

         // resource:fft_N_Mux_32_2_2_4
         always @(fft_OrReduction_30U_1U_4_7_out1 or fft_N_Mux_32_2_2_4_17_out1 or fft_N_Mux_32_2_2_4_20_in2)
          begin :fft_N_Mux_32_2_2_4_20
            if (fft_OrReduction_30U_1U_4_7_out1) begin
               fft_N_Mux_32_2_2_4_20_out1 = fft_N_Mux_32_2_2_4_20_in2;
            end
            else begin
               fft_N_Mux_32_2_2_4_20_out1 = fft_N_Mux_32_2_2_4_17_out1;
            end
         end

         // resource: mux_28bx3i
         always @(s_reg_1[31:4] or s_reg_32[31:4] or gs_ctrl18 or s_reg_19_slice[23:4])
          begin :drive_fft_OrReduction_28U_1U_4_21_in1
            case (gs_ctrl18) 

               2'd1:                begin
                  fft_OrReduction_28U_1U_4_21_in1 = {8'b00000000, s_reg_19_slice[23:4]};
               end
               
               2'd2:                begin
                  fft_OrReduction_28U_1U_4_21_in1 = s_reg_32[31:4];
               end
               
               default:                begin
                  fft_OrReduction_28U_1U_4_21_in1 = s_reg_1[31:4];
               end
               
            endcase

         end

         // resource: fft_OrReduction_28U_1U_4  instance: fft_OrReduction_28U_1U_4_21
         assign fft_OrReduction_28U_1U_4_21_out1 = (|fft_OrReduction_28U_1U_4_21_in1);

         // resource: mux_32bx2i
         always @(s_reg_21 or gs_ctrl19)
          begin :drive_fft_Add_32Sx4S_32S_4_22_in2
            if (gs_ctrl19) begin
               fft_Add_32Sx4S_32S_4_22_in2 = s_reg_21;
            end
            else begin
               fft_Add_32Sx4S_32S_4_22_in2 = 32'd0000000000;
            end
         end

         // resource: fft_Add_32Sx4S_32S_4  instance: fft_Add_32Sx4S_32S_4_22
         assign fft_Add_32Sx4S_32S_4_22_out1 = fft_Add_32Sx4S_32S_4_22_in2 + 32'd0000000006;

         // resource: mux_32bx3i
         always @(s_reg_1[4] or s_reg_32[4] or fft_N_Mux_32_2_2_4_20_out1[30:0] or gs_ctrl20 or s_reg_19_slice[4])
          begin :drive_fft_N_Mux_32_2_2_4_23_in2
            case (gs_ctrl20) 

               2'd1:                begin
                  fft_N_Mux_32_2_2_4_23_in2 = {fft_N_Mux_32_2_2_4_20_out1[30:0], s_reg_19_slice[4]};
               end
               
               2'd2:                begin
                  fft_N_Mux_32_2_2_4_23_in2 = {fft_N_Mux_32_2_2_4_20_out1[30:0], s_reg_32[4]};
               end
               
               default:                begin
                  fft_N_Mux_32_2_2_4_23_in2 = {fft_N_Mux_32_2_2_4_20_out1[30:0], s_reg_1[4]};
               end
               
            endcase

         end

         // resource:fft_N_Mux_32_2_2_4
         always @(fft_OrReduction_28U_1U_4_8_out1 or fft_N_Mux_32_2_2_4_20_out1 or fft_N_Mux_32_2_2_4_23_in2)
          begin :fft_N_Mux_32_2_2_4_23
            if (fft_OrReduction_28U_1U_4_8_out1) begin
               fft_N_Mux_32_2_2_4_23_out1 = fft_N_Mux_32_2_2_4_23_in2;
            end
            else begin
               fft_N_Mux_32_2_2_4_23_out1 = fft_N_Mux_32_2_2_4_20_out1;
            end
         end

         // resource: fft_Add_32Sx2S_32S_4  instance: fft_Add_32Sx2S_32S_4_24
         assign fft_Add_32Sx2S_32S_4_24_out1 = fft_Add_32Sx4S_32S_4_22_out1 + 32'd0000000001;

         // resource: fft_OrReduction_27U_1U_4  instance: fft_OrReduction_27U_1U_4_25
         assign fft_OrReduction_27U_1U_4_25_out1 = (|s_reg_8);

         // resource: fft_OrReduction_26U_1U_4  instance: fft_OrReduction_26U_1U_4_26
         assign fft_OrReduction_26U_1U_4_26_out1 = (|s_reg_9);

         // resource: fft_LessThan_32Sx6S_1U_4  instance: fft_LessThan_32Sx6S_1U_4_27
         assign fft_LessThan_32Sx6S_1U_4_27_out1 = s_reg_18[31] ^ s_reg_18 < 32'd0000000031;

         // resource: fft_Add_32Sx2S_32S_4  instance: fft_Add_32Sx2S_32S_4_28
         assign fft_Add_32Sx2S_32S_4_28_out1 = s_reg_18 + 32'd0000000001;

         // resource: fft_OrReduction_26U_1U_4  instance: fft_OrReduction_26U_1U_4_29
         assign fft_OrReduction_26U_1U_4_29_out1 = (|s_reg_10);

         // resource: fft_OrReduction_24U_1U_4  instance: fft_OrReduction_24U_1U_4_30
         assign fft_OrReduction_24U_1U_4_30_out1 = (|s_reg_19_slice);

         // resource: fft_Sub_32Sx1U_32S_4  instance: fft_Sub_32Sx1U_32S_4_31
         assign fft_Sub_32Sx1U_32S_4_31_out1 = s_reg_15 - {31'b0000000000000000000000000000000, s_reg_14};

         // thread: drive_fft_N_Mux_32_2_2_4_32_in2
         assign fft_N_Mux_32_2_2_4_32_in2 = {s_reg_17[30:0], s_reg_8[0]};

         // resource:fft_N_Mux_32_2_2_4
         always @(s_reg_11 or s_reg_17 or fft_N_Mux_32_2_2_4_32_in2)
          begin :fft_N_Mux_32_2_2_4_32
            if (s_reg_11) begin
               fft_N_Mux_32_2_2_4_32_out1 = fft_N_Mux_32_2_2_4_32_in2;
            end
            else begin
               fft_N_Mux_32_2_2_4_32_out1 = s_reg_17;
            end
         end

         // resource: fft_Sub_32Sx1U_32S_4  instance: fft_Sub_32Sx1U_32S_4_33
         assign fft_Sub_32Sx1U_32S_4_33_out1 = fft_Sub_32Sx1U_32S_4_31_out1 - {31'b0000000000000000000000000000000, s_reg_16};

         // resource: fft_Sub_32Sx1U_32S_4  instance: fft_Sub_32Sx1U_32S_4_34
         assign fft_Sub_32Sx1U_32S_4_34_out1 = fft_Sub_32Sx1U_32S_4_33_out1 - {31'b0000000000000000000000000000000, fft_OrReduction_27U_1U_4_25_out1};

         // thread: drive_fft_N_Mux_32_2_2_4_35_in2
         assign fft_N_Mux_32_2_2_4_35_in2 = {fft_N_Mux_32_2_2_4_32_out1[30:0], s_reg_9[0]};

         // resource:fft_N_Mux_32_2_2_4
         always @(s_reg_12 or fft_N_Mux_32_2_2_4_32_out1 or fft_N_Mux_32_2_2_4_35_in2)
          begin :fft_N_Mux_32_2_2_4_35
            if (s_reg_12) begin
               fft_N_Mux_32_2_2_4_35_out1 = fft_N_Mux_32_2_2_4_35_in2;
            end
            else begin
               fft_N_Mux_32_2_2_4_35_out1 = fft_N_Mux_32_2_2_4_32_out1;
            end
         end

         // resource: fft_Sub_32Sx1U_32S_4  instance: fft_Sub_32Sx1U_32S_4_36
         assign fft_Sub_32Sx1U_32S_4_36_out1 = fft_Sub_32Sx1U_32S_4_34_out1 - {31'b0000000000000000000000000000000, fft_OrReduction_26U_1U_4_26_out1};

         // thread: drive_fft_N_Mux_32_2_2_4_37_in2
         assign fft_N_Mux_32_2_2_4_37_in2 = {fft_N_Mux_32_2_2_4_35_out1[30:0], s_reg_10[0]};

         // resource:fft_N_Mux_32_2_2_4
         always @(s_reg_13 or fft_N_Mux_32_2_2_4_35_out1 or fft_N_Mux_32_2_2_4_37_in2)
          begin :fft_N_Mux_32_2_2_4_37
            if (s_reg_13) begin
               fft_N_Mux_32_2_2_4_37_out1 = fft_N_Mux_32_2_2_4_37_in2;
            end
            else begin
               fft_N_Mux_32_2_2_4_37_out1 = fft_N_Mux_32_2_2_4_35_out1;
            end
         end

         // thread: drive_fft_N_Mux_32_2_2_4_38_in2
         assign fft_N_Mux_32_2_2_4_38_in2 = {fft_N_Mux_32_2_2_4_37_out1[30:0], s_reg_19_slice[0]};

         // resource:fft_N_Mux_32_2_2_4
         always @(fft_OrReduction_24U_1U_4_30_out1 or fft_N_Mux_32_2_2_4_37_out1 or fft_N_Mux_32_2_2_4_38_in2)
          begin :fft_N_Mux_32_2_2_4_38
            if (fft_OrReduction_24U_1U_4_30_out1) begin
               fft_N_Mux_32_2_2_4_38_out1 = fft_N_Mux_32_2_2_4_38_in2;
            end
            else begin
               fft_N_Mux_32_2_2_4_38_out1 = fft_N_Mux_32_2_2_4_37_out1;
            end
         end

         // resource: fft_Sub_32Sx1U_32S_4  instance: fft_Sub_32Sx1U_32S_4_39
         assign fft_Sub_32Sx1U_32S_4_39_out1 = s_reg_23 - {31'b0000000000000000000000000000000, s_reg_22};

         // resource: fft_OrReduction_24U_1U_4  instance: fft_OrReduction_24U_1U_4_40
         assign fft_OrReduction_24U_1U_4_40_out1 = (|s_reg_19_slice);

         // resource: fft_Sub_32Sx1U_32S_4  instance: fft_Sub_32Sx1U_32S_4_41
         assign fft_Sub_32Sx1U_32S_4_41_out1 = fft_Sub_32Sx1U_32S_4_39_out1 - {31'b0000000000000000000000000000000, fft_OrReduction_24U_1U_4_40_out1};

         // resource: fft_LessThan_32Sx6S_1U_4  instance: fft_LessThan_32Sx6S_1U_4_42
         assign fft_LessThan_32Sx6S_1U_4_42_out1 = s_reg_21[31] ^ s_reg_21 < 32'd0000000031;

         // resource: mux_32bx2i
         always @(s_reg_20 or s_reg_24 or s_reg_25)
          begin :drive_fft_LeftShift_32Ux5U_32U_4_43_in2
            if (s_reg_20) begin
               fft_LeftShift_32Ux5U_32U_4_43_in2 = s_reg_25;
            end
            else begin
               fft_LeftShift_32Ux5U_32U_4_43_in2 = s_reg_24;
            end
         end

         // resource: mux_5bx2i
         always @(s_reg_20 or fft_Sub_32Sx1U_32S_4_39_out1[4:0] or fft_Sub_32Sx1U_32S_4_41_out1[4:0])
          begin :drive_fft_LeftShift_32Ux5U_32U_4_43_in1
            if (s_reg_20) begin
               fft_LeftShift_32Ux5U_32U_4_43_in1 = fft_Sub_32Sx1U_32S_4_41_out1[4:0];
            end
            else begin
               fft_LeftShift_32Ux5U_32U_4_43_in1 = fft_Sub_32Sx1U_32S_4_39_out1[4:0];
            end
         end

         // resource: fft_LeftShift_32Ux5U_32U_4  instance: fft_LeftShift_32Ux5U_32U_4_43
         assign fft_LeftShift_32Ux5U_32U_4_43_out1 = fft_LeftShift_32Ux5U_32U_4_43_in2 << fft_LeftShift_32Ux5U_32U_4_43_in1;

         // resource: fft_Minus_5U_5U_4  instance: fft_Minus_5U_5U_4_44
         assign fft_Minus_5U_5U_4_44_out1 = -s_reg_3[4:0];

         // resource: fft_RightShift_32Ux5U_32U_4  instance: fft_RightShift_32Ux5U_32U_4_45
         assign fft_RightShift_32Ux5U_32U_4_45_out1 = s_reg_27 >> fft_Minus_5U_5U_4_44_out1;

         // resource: mux_14bx4i
         always @(s_reg_1[13:0] or s_reg_28[13:0] or s_reg_52 or s_reg_56 or gs_ctrl23)
          begin :drive_fft_plm_block_in_fx64_A0_1_1_A2
            case (gs_ctrl23) 

               2'd1:                begin
                  fft_plm_block_in_fx64_A0_1_1_A2_slice = s_reg_28[13:0];
               end
               
               2'd2:                begin
                  fft_plm_block_in_fx64_A0_1_1_A2_slice = s_reg_52;
               end
               
               2'd3:                begin
                  fft_plm_block_in_fx64_A0_1_1_A2_slice = s_reg_56;
               end
               
               default:                begin
                  fft_plm_block_in_fx64_A0_1_1_A2_slice = s_reg_1[13:0];
               end
               
            endcase

         end

         // resource: mux_1bx2i
         always @(s_reg_20 or s_reg_5 or fft_LessThan_32Sx6S_1U_4_42_out1 or gs_ctrl24)
          begin :drive_fft_plm_block_in_fx64_A0_1_1_CE2
            case (gs_ctrl24) 

               2'd1:                begin
                  if (s_reg_20) begin
                     if (!fft_LessThan_32Sx6S_1U_4_42_out1 && s_reg_5 != 32'd0000000000) begin
                        fft_plm_block_in_fx64_A0_1_1_CE2 = 1'd1;
                     end
                     else begin
                        fft_plm_block_in_fx64_A0_1_1_CE2 = 1'd0;
                     end
                  end
                  else begin
                     if (s_reg_5 != 32'd0000000000) begin
                        fft_plm_block_in_fx64_A0_1_1_CE2 = 1'd1;
                     end
                     else begin
                        fft_plm_block_in_fx64_A0_1_1_CE2 = 1'd0;
                     end
                  end
               end
               
               2'd2:                begin
                  fft_plm_block_in_fx64_A0_1_1_CE2 = 1'd1;
               end
               
               default:                begin
                  fft_plm_block_in_fx64_A0_1_1_CE2 = 1'd0;
               end
               
            endcase

         end

         // resource: fft_LessThan_32Ux32U_1U_4  instance: fft_LessThan_32Ux32U_1U_4_46
         assign fft_LessThan_32Ux32U_1U_4_46_out1 = s_reg_1 < s_reg_28;

         // resource: fft_Add_32Ux2S_32S_4  instance: fft_Add_32Ux2S_32S_4_47
         assign fft_Add_32Ux2S_32S_4_47_out1 = s_reg_1 + 32'd0000000001;

         // resource: mux_15bx4i
         always @(s_reg_36 or s_reg_38 or s_reg_52 or s_reg_56 or gs_ctrl29)
          begin :drive_fft_plm_block_in_fx64_A0_1_1_A0
            case (gs_ctrl29) 

               2'd1:                begin
                  fft_plm_block_in_fx64_A0_1_1_A0 = s_reg_38;
               end
               
               2'd2:                begin
                  fft_plm_block_in_fx64_A0_1_1_A0 = {s_reg_56, 1'b1};
               end
               
               2'd3:                begin
                  fft_plm_block_in_fx64_A0_1_1_A0 = {s_reg_52, 1'b1};
               end
               
               default:                begin
                  fft_plm_block_in_fx64_A0_1_1_A0 = s_reg_36;
               end
               
            endcase

         end

         // resource: mux_64bx4i
         always @(s_reg_30 or s_reg_34 or fft_Or_64Sx63U_64S_4_88_out1 or fft_Or_64Sx63U_64S_4_90_out1 or gs_ctrl30)
          begin :drive_fft_plm_block_in_fx64_A0_1_1_D0
            case (gs_ctrl30) 

               2'd1:                begin
                  fft_plm_block_in_fx64_A0_1_1_D0 = s_reg_30;
               end
               
               2'd2:                begin
                  fft_plm_block_in_fx64_A0_1_1_D0 = fft_Or_64Sx63U_64S_4_88_out1;
               end
               
               2'd3:                begin
                  fft_plm_block_in_fx64_A0_1_1_D0 = fft_Or_64Sx63U_64S_4_90_out1;
               end
               
               default:                begin
                  fft_plm_block_in_fx64_A0_1_1_D0 = s_reg_34;
               end
               
            endcase

         end

         // resource: mux_1bx2i
         always @(gs_ctrl31)
          begin :drive_fft_plm_block_in_fx64_A0_1_1_WE0
            if (gs_ctrl31) begin
               fft_plm_block_in_fx64_A0_1_1_WE0 = 1'd1;
            end
            else begin
               fft_plm_block_in_fx64_A0_1_1_WE0 = 1'd0;
            end
         end

         // resource: mux_1bx2i
         always @(gs_ctrl32)
          begin :drive_fft_plm_block_in_fx64_A0_1_1_CE0
            if (gs_ctrl32) begin
               fft_plm_block_in_fx64_A0_1_1_CE0 = 1'd1;
            end
            else begin
               fft_plm_block_in_fx64_A0_1_1_CE0 = 1'd0;
            end
         end

         // thread: drive_fft_plm_block_in_fx64_A0_1_1_WEM0
         assign fft_plm_block_in_fx64_A0_1_1_WEM0 = 64'd18446744073709551615;

         // resource: fft_LessThan_32Ux32U_1U_4  instance: fft_LessThan_32Ux32U_1U_4_48
         assign fft_LessThan_32Ux32U_1U_4_48_out1 = s_reg_32 < s_reg_5;

         // resource: fft_LeftShift_2Sx5U_32S_4  instance: fft_LeftShift_2Sx5U_32S_4_49
         assign fft_LeftShift_2Sx5U_32S_4_49_out1 = 32'd0000000001 << s_reg_2[4:0];

         // resource: fft_Add_32Ux2S_32S_4  instance: fft_Add_32Ux2S_32S_4_50
         assign fft_Add_32Ux2S_32S_4_50_out1 = s_reg_2 + 32'd0000000001;

         // resource:fft_N_Mux_24_14_3_4
         always @(s_reg_2)
          begin :fft_N_Mux_24_14_3_4_51
            case (s_reg_2) 

               32'd0000000001:                begin
                  fft_N_Mux_24_14_3_4_51_out1_slice = 22'd2097152;
               end
               
               32'd0000000002:                begin
                  fft_N_Mux_24_14_3_4_51_out1_slice = 22'd1048576;
               end
               
               32'd0000000003:                begin
                  fft_N_Mux_24_14_3_4_51_out1_slice = 22'd0704195;
               end
               
               32'd0000000004:                begin
                  fft_N_Mux_24_14_3_4_51_out1_slice = 22'd0319272;
               end
               
               32'd0000000005:                begin
                  fft_N_Mux_24_14_3_4_51_out1_slice = 22'd0080592;
               end
               
               32'd0000000006:                begin
                  fft_N_Mux_24_14_3_4_51_out1_slice = 22'd0020197;
               end
               
               32'd0000000007:                begin
                  fft_N_Mux_24_14_3_4_51_out1_slice = 22'd0005052;
               end
               
               32'd0000000008:                begin
                  fft_N_Mux_24_14_3_4_51_out1_slice = 22'd0001263;
               end
               
               32'd0000000009:                begin
                  fft_N_Mux_24_14_3_4_51_out1_slice = 22'd0000316;
               end
               
               32'd0000000010:                begin
                  fft_N_Mux_24_14_3_4_51_out1_slice = 22'd0000079;
               end
               
               32'd0000000011:                begin
                  fft_N_Mux_24_14_3_4_51_out1_slice = 22'd0000020;
               end
               
               32'd0000000012:                begin
                  fft_N_Mux_24_14_3_4_51_out1_slice = 22'd0000005;
               end
               
               32'd0000000013:                begin
                  fft_N_Mux_24_14_3_4_51_out1_slice = 22'd0000001;
               end
               
               default:                begin
                  fft_N_Mux_24_14_3_4_51_out1_slice = 22'd0000000;
               end
               
            endcase

         end

         // resource:fft_N_Mux_23_16_4_4
         always @(s_reg_2)
          begin :fft_N_Mux_23_16_4_4_52
            case (s_reg_2) 

               32'd0000000002:                begin
                  fft_N_Mux_23_16_4_4_52_out1 = 23'd4194304;
               end
               
               32'd0000000003:                begin
                  fft_N_Mux_23_16_4_4_52_out1 = 23'd5422787;
               end
               
               32'd0000000004:                begin
                  fft_N_Mux_23_16_4_4_52_out1 = 23'd6783517;
               end
               
               32'd0000000005:                begin
                  fft_N_Mux_23_16_4_4_52_out1 = 23'd7570340;
               end
               
               32'd0000000006:                begin
                  fft_N_Mux_23_16_4_4_52_out1 = 23'd7977494;
               end
               
               32'd0000000007:                begin
                  fft_N_Mux_23_16_4_4_52_out1 = 23'd8182803;
               end
               
               32'd0000000008:                begin
                  fft_N_Mux_23_16_4_4_52_out1 = 23'd8285675;
               end
               
               32'd0000000009:                begin
                  fft_N_Mux_23_16_4_4_52_out1 = 23'd8337137;
               end
               
               32'd0000000010:                begin
                  fft_N_Mux_23_16_4_4_52_out1 = 23'd8362872;
               end
               
               32'd0000000011:                begin
                  fft_N_Mux_23_16_4_4_52_out1 = 23'd8375740;
               end
               
               32'd0000000012:                begin
                  fft_N_Mux_23_16_4_4_52_out1 = 23'd8382174;
               end
               
               32'd0000000013:                begin
                  fft_N_Mux_23_16_4_4_52_out1 = 23'd8385391;
               end
               
               32'd0000000014:                begin
                  fft_N_Mux_23_16_4_4_52_out1 = 23'd8387000;
               end
               
               32'd0000000015:                begin
                  fft_N_Mux_23_16_4_4_52_out1 = 23'd8387804;
               end
               
               32'd0000000016:                begin
                  fft_N_Mux_23_16_4_4_52_out1 = 23'd8388206;
               end
               
               default:                begin
                  fft_N_Mux_23_16_4_4_52_out1 = 23'd0000000;
               end
               
            endcase

         end

         // resource: fft_LessThanEQ_32Ux32U_1U_4  instance: fft_LessThanEQ_32Ux32U_1U_4_53
         assign fft_LessThanEQ_32Ux32U_1U_4_53_out1 = fft_Add_32Ux2S_32S_4_50_out1 <= s_reg_3;

         // resource: mux_1bx2i
         always @(s_reg_39[31] or fft_LeftShift_2Sx5U_32S_4_49_out1[31] or gs_ctrl33)
          begin :drive_fft_And_1Ux1U_1U_4_54_in2
            if (gs_ctrl33) begin
               fft_And_1Ux1U_1U_4_54_in2 = s_reg_39[31];
            end
            else begin
               fft_And_1Ux1U_1U_4_54_in2 = fft_LeftShift_2Sx5U_32S_4_49_out1[31];
            end
         end

         // resource: mux_1bx2i
         always @(s_reg_39[0] or fft_LeftShift_2Sx5U_32S_4_49_out1[0] or gs_ctrl34)
          begin :drive_fft_And_1Ux1U_1U_4_54_in1
            if (gs_ctrl34) begin
               fft_And_1Ux1U_1U_4_54_in1 = s_reg_39[0];
            end
            else begin
               fft_And_1Ux1U_1U_4_54_in1 = fft_LeftShift_2Sx5U_32S_4_49_out1[0];
            end
         end

         // resource: fft_And_1Ux1U_1U_4  instance: fft_And_1Ux1U_1U_4_54
         assign fft_And_1Ux1U_1U_4_54_out1 = fft_And_1Ux1U_1U_4_54_in2 & fft_And_1Ux1U_1U_4_54_in1;

         // resource: mux_31bx2i
         always @(s_reg_39[31:1] or fft_LeftShift_2Sx5U_32S_4_49_out1[31:1] or gs_ctrl35)
          begin :drive_fft_Add_31Sx1U_32S_4_55_in2
            if (gs_ctrl35) begin
               fft_Add_31Sx1U_32S_4_55_in2 = s_reg_39[31:1];
            end
            else begin
               fft_Add_31Sx1U_32S_4_55_in2 = fft_LeftShift_2Sx5U_32S_4_49_out1[31:1];
            end
         end

         // resource: fft_Add_31Sx1U_32S_4  instance: fft_Add_31Sx1U_32S_4_55
         assign fft_Add_31Sx1U_32S_4_55_out1 = {fft_Add_31Sx1U_32S_4_55_in2[30], fft_Add_31Sx1U_32S_4_55_in2} + {31'b0000000000000000000000000000000, fft_And_1Ux1U_1U_4_54_out1};

         // resource: fft_LessThan_1Sx32S_1U_4  instance: fft_LessThan_1Sx32S_1U_4_56
         assign fft_LessThan_1Sx32S_1U_4_56_out1 = fft_Add_31Sx1U_32S_4_55_out1[31] ^ 32'd0000000000 < fft_Add_31Sx1U_32S_4_55_out1;

         // resource: mux_32bx2i
         always @(s_reg_46 or gs_ctrl36)
          begin :drive_fft_Add_32Ux32U_32U_4_57_in2
            if (gs_ctrl36) begin
               fft_Add_32Ux32U_32U_4_57_in2 = s_reg_46;
            end
            else begin
               fft_Add_32Ux32U_32U_4_57_in2 = 32'd0000000000;
            end
         end

         // resource: mux_32bx2i
         always @(s_reg_39 or fft_LeftShift_2Sx5U_32S_4_49_out1 or gs_ctrl37)
          begin :drive_fft_Add_32Ux32U_32U_4_57_in1
            if (gs_ctrl37) begin
               fft_Add_32Ux32U_32U_4_57_in1 = s_reg_39;
            end
            else begin
               fft_Add_32Ux32U_32U_4_57_in1 = fft_LeftShift_2Sx5U_32S_4_49_out1;
            end
         end

         // resource: fft_Add_32Ux32U_32U_4  instance: fft_Add_32Ux32U_32U_4_57
         assign fft_Add_32Ux32U_32U_4_57_out1 = fft_Add_32Ux32U_32U_4_57_in2 + fft_Add_32Ux32U_32U_4_57_in1;

         // resource: fft_LessThan_32Ux32U_1U_4  instance: fft_LessThan_32Ux32U_1U_4_58
         assign fft_LessThan_32Ux32U_1U_4_58_out1 = fft_Add_32Ux32U_32U_4_57_out1 < s_reg_4;

         // resource: mux_14bx3i
         always @(s_reg_45[13:0] or s_reg_46[13:0] or gs_ctrl38)
          begin :drive_fft_Add_14Ux14U_14U_4_59_in2
            case (gs_ctrl38) 

               2'd1:                begin
                  fft_Add_14Ux14U_14U_4_59_in2 = s_reg_45[13:0];
               end
               
               2'd2:                begin
                  fft_Add_14Ux14U_14U_4_59_in2 = s_reg_46[13:0];
               end
               
               default:                begin
                  fft_Add_14Ux14U_14U_4_59_in2 = 14'd00000;
               end
               
            endcase

         end

         // resource: mux_14bx2i
         always @(s_reg_55[13:0] or gs_ctrl39)
          begin :drive_fft_Add_14Ux14U_14U_4_59_in1
            if (gs_ctrl39) begin
               fft_Add_14Ux14U_14U_4_59_in1 = s_reg_55[13:0];
            end
            else begin
               fft_Add_14Ux14U_14U_4_59_in1 = 14'd00000;
            end
         end

         // resource: fft_Add_14Ux14U_14U_4  instance: fft_Add_14Ux14U_14U_4_59
         assign fft_Add_14Ux14U_14U_4_59_out1 = fft_Add_14Ux14U_14U_4_59_in2 + fft_Add_14Ux14U_14U_4_59_in1;

         // resource: fft_Add_14Ux14U_14U_4  instance: fft_Add_14Ux14U_14U_4_60
         assign fft_Add_14Ux14U_14U_4_60_out1 = s_reg_51 + s_reg_44[13:0];

         // resource: mux_22bx2i
         always @(gs_ctrl40 or fft_N_Mux_24_14_3_4_51_out1_slice or s_reg_41_slice)
          begin :drive_fft_Mul_64Sx64S_86S_4_61_in2
            if (gs_ctrl40) begin
               fft_Mul_64Sx64S_86S_4_61_in2_slice1 = s_reg_41_slice;
            end
            else begin
               fft_Mul_64Sx64S_86S_4_61_in2_slice1 = fft_N_Mux_24_14_3_4_51_out1_slice;
            end
         end

         // resource: mux_64bx2i
         always @(fft_Add_64Sx1U_64S_4_91_out1 or gs_ctrl41)
          begin :drive_fft_Mul_64Sx64S_86S_4_61_in1
            if (gs_ctrl41) begin
               fft_Mul_64Sx64S_86S_4_61_in1 = fft_Add_64Sx1U_64S_4_91_out1;
            end
            else begin
               fft_Mul_64Sx64S_86S_4_61_in1 = 64'd00000000000004194304;
            end
         end

         // resource: mux_23bx2i
         always @(s_reg_42 or fft_N_Mux_23_16_4_4_52_out1 or gs_ctrl42)
          begin :drive_fft_Mul_64Sx64S_86S_4_62_in2
            if (gs_ctrl42) begin
               fft_Mul_64Sx64S_86S_4_62_in2_slice = s_reg_42;
            end
            else begin
               fft_Mul_64Sx64S_86S_4_62_in2_slice = fft_N_Mux_23_16_4_4_52_out1;
            end
         end

         // resource: mux_64bx2i
         always @(fft_Add_64Sx1U_64S_4_92_out1 or gs_ctrl43)
          begin :drive_fft_Mul_64Sx64S_86S_4_62_in1
            if (gs_ctrl43) begin
               fft_Mul_64Sx64S_86S_4_62_in1 = fft_Add_64Sx1U_64S_4_92_out1;
            end
            else begin
               fft_Mul_64Sx64S_86S_4_62_in1 = 64'd00000000000000000000;
            end
         end

         // resource: mux_22bx2i
         always @(gs_ctrl44 or fft_N_Mux_24_14_3_4_51_out1_slice or s_reg_41_slice)
          begin :drive_fft_Mul_64Sx64S_86S_4_63_in2
            if (gs_ctrl44) begin
               fft_Mul_64Sx64S_86S_4_63_in2_slice1 = s_reg_41_slice;
            end
            else begin
               fft_Mul_64Sx64S_86S_4_63_in2_slice1 = fft_N_Mux_24_14_3_4_51_out1_slice;
            end
         end

         // resource: mux_64bx2i
         always @(fft_Add_64Sx1U_64S_4_92_out1 or gs_ctrl45)
          begin :drive_fft_Mul_64Sx64S_86S_4_63_in1
            if (gs_ctrl45) begin
               fft_Mul_64Sx64S_86S_4_63_in1 = fft_Add_64Sx1U_64S_4_92_out1;
            end
            else begin
               fft_Mul_64Sx64S_86S_4_63_in1 = 64'd00000000000000000000;
            end
         end

         // resource: mux_23bx2i
         always @(s_reg_42 or fft_N_Mux_23_16_4_4_52_out1 or gs_ctrl46)
          begin :drive_fft_Mul_64Sx64S_86S_4_64_in2
            if (gs_ctrl46) begin
               fft_Mul_64Sx64S_86S_4_64_in2_slice = s_reg_42;
            end
            else begin
               fft_Mul_64Sx64S_86S_4_64_in2_slice = fft_N_Mux_23_16_4_4_52_out1;
            end
         end

         // resource: mux_64bx2i
         always @(fft_Add_64Sx1U_64S_4_91_out1 or gs_ctrl47)
          begin :drive_fft_Mul_64Sx64S_86S_4_64_in1
            if (gs_ctrl47) begin
               fft_Mul_64Sx64S_86S_4_64_in1 = fft_Add_64Sx1U_64S_4_91_out1;
            end
            else begin
               fft_Mul_64Sx64S_86S_4_64_in1 = 64'd00000000000004194304;
            end
         end

         // resource: fft_Add_86Ux86U_86U_4  instance: fft_Add_86Ux86U_86U_4_65
         assign fft_Add_86Ux86U_86U_4_65_out1 = fft_Mul_64Sx64S_86S_4_62_out1 + fft_Mul_64Sx64S_86S_4_61_out1;

         // resource: fft_Sub_86Ux86U_86U_4  instance: fft_Sub_86Ux86U_86U_4_66
         assign fft_Sub_86Ux86U_86U_4_66_out1 = fft_Mul_64Sx64S_86S_4_64_out1 - fft_Mul_64Sx64S_86S_4_63_out1;

         // resource: fft_Add_32Sx2S_32S_4  instance: fft_Add_32Sx2S_32S_4_67
         assign fft_Add_32Sx2S_32S_4_67_out1 = s_reg_50 + 32'd0000000001;

         // resource: fft_Add_14Ux14U_14U_4  instance: fft_Add_14Ux14U_14U_4_68
         assign fft_Add_14Ux14U_14U_4_68_out1 = s_reg_45[13:0] + s_reg_50[13:0];

         // thread: drive_fft_Sub_86Ux86U_86U_4_69_in2
         assign fft_Sub_86Ux86U_86U_4_69_in2 = {s_reg_48, 22'd0000000};

         // resource: fft_Sub_86Ux86U_86U_4  instance: fft_Sub_86Ux86U_86U_4_69
         assign fft_Sub_86Ux86U_86U_4_69_out1 = fft_Sub_86Ux86U_86U_4_69_in2 - s_reg_53;

         // thread: drive_fft_Add_86Ux86U_86U_4_70_in1
         assign fft_Add_86Ux86U_86U_4_70_in1 = {s_reg_49, 22'd0000000};

         // resource: fft_Add_86Ux86U_86U_4  instance: fft_Add_86Ux86U_86U_4_70
         assign fft_Add_86Ux86U_86U_4_70_out1 = s_reg_54 + fft_Add_86Ux86U_86U_4_70_in1;

         // thread: drive_fft_Or_64Sx63U_64S_4_71_in2
         assign fft_Or_64Sx63U_64S_4_71_in2 = {s_reg_59[63], 63'd0000000000000000000};

         // resource: fft_Or_64Sx63U_64S_4  instance: fft_Or_64Sx63U_64S_4_71
         assign fft_Or_64Sx63U_64S_4_71_out1 = fft_Or_64Sx63U_64S_4_71_in2 | {1'b0, s_reg_59[62:0]};

         // thread: drive_fft_Or_64Sx63U_64S_4_72_in2
         assign fft_Or_64Sx63U_64S_4_72_in2 = {s_reg_60[63], 63'd0000000000000000000};

         // resource: fft_Or_64Sx63U_64S_4  instance: fft_Or_64Sx63U_64S_4_72
         assign fft_Or_64Sx63U_64S_4_72_out1 = fft_Or_64Sx63U_64S_4_72_in2 | {1'b0, s_reg_60[62:0]};

         // thread: drive_fft_Mul_64Sx64S_86S_4_73_in2
         assign fft_Mul_64Sx64S_86S_4_73_in2 = s_reg_49;

         // thread: drive_fft_Mul_64Sx64S_86S_4_73_in1
         assign fft_Mul_64Sx64S_86S_4_73_in1 = fft_Or_64Sx63U_64S_4_72_out1;

         // thread: drive_fft_Mul_64Sx64S_86S_4_74_in2
         assign fft_Mul_64Sx64S_86S_4_74_in2 = s_reg_48;

         // thread: drive_fft_Mul_64Sx64S_86S_4_74_in1
         assign fft_Mul_64Sx64S_86S_4_74_in1 = fft_Or_64Sx63U_64S_4_71_out1;

         // thread: drive_fft_Mul_64Sx64S_86S_4_75_in2
         assign fft_Mul_64Sx64S_86S_4_75_in2 = s_reg_49;

         // thread: drive_fft_Mul_64Sx64S_86S_4_75_in1
         assign fft_Mul_64Sx64S_86S_4_75_in1 = fft_Or_64Sx63U_64S_4_71_out1;

         // thread: drive_fft_Mul_64Sx64S_86S_4_76_in2
         assign fft_Mul_64Sx64S_86S_4_76_in2 = s_reg_48;

         // thread: drive_fft_Mul_64Sx64S_86S_4_76_in1
         assign fft_Mul_64Sx64S_86S_4_76_in1 = fft_Or_64Sx63U_64S_4_72_out1;

         // resource: fft_Sub_86Ux86U_86U_4  instance: fft_Sub_86Ux86U_86U_4_77
         assign fft_Sub_86Ux86U_86U_4_77_out1 = fft_Mul_64Sx64S_86S_4_74_out1 - fft_Mul_64Sx64S_86S_4_73_out1;

         // resource: fft_Add_86Ux86U_86U_4  instance: fft_Add_86Ux86U_86U_4_78
         assign fft_Add_86Ux86U_86U_4_78_out1 = fft_Mul_64Sx64S_86S_4_76_out1 + fft_Mul_64Sx64S_86S_4_75_out1;

         // thread: drive_fft_Add_64Sx1U_64S_4_79_in2
         assign fft_Add_64Sx1U_64S_4_79_in2 = fft_Sub_86Ux86U_86U_4_77_out1[85:22];

         // thread: drive_fft_Add_64Sx1U_64S_4_79_in1
         assign fft_Add_64Sx1U_64S_4_79_in1 = fft_Sub_86Ux86U_86U_4_77_out1[21];

         // resource: fft_Add_64Sx1U_64S_4  instance: fft_Add_64Sx1U_64S_4_79
         assign fft_Add_64Sx1U_64S_4_79_out1 = fft_Add_64Sx1U_64S_4_79_in2 + {63'b000000000000000000000000000000000000000000000000000000000000000, fft_Add_64Sx1U_64S_4_79_in1};

         // thread: drive_fft_Or_64Sx63U_64S_4_80_in2
         assign fft_Or_64Sx63U_64S_4_80_in2 = {s_reg_61[63], 63'd0000000000000000000};

         // resource: fft_Or_64Sx63U_64S_4  instance: fft_Or_64Sx63U_64S_4_80
         assign fft_Or_64Sx63U_64S_4_80_out1 = fft_Or_64Sx63U_64S_4_80_in2 | {1'b0, s_reg_61[62:0]};

         // thread: drive_fft_Or_64Sx63U_64S_4_81_in2
         assign fft_Or_64Sx63U_64S_4_81_in2 = {s_reg_62[63], 63'd0000000000000000000};

         // resource: fft_Or_64Sx63U_64S_4  instance: fft_Or_64Sx63U_64S_4_81
         assign fft_Or_64Sx63U_64S_4_81_out1 = fft_Or_64Sx63U_64S_4_81_in2 | {1'b0, s_reg_62[62:0]};

         // thread: drive_fft_Add_64Sx1U_64S_4_82_in2
         assign fft_Add_64Sx1U_64S_4_82_in2 = s_reg_63[64:1];

         // resource: fft_Add_64Sx1U_64S_4  instance: fft_Add_64Sx1U_64S_4_82
         assign fft_Add_64Sx1U_64S_4_82_out1 = fft_Add_64Sx1U_64S_4_82_in2 + {63'b000000000000000000000000000000000000000000000000000000000000000, s_reg_63[0]};

         // resource: fft_Add_64Ux64U_64U_4  instance: fft_Add_64Ux64U_64U_4_83
         assign fft_Add_64Ux64U_64U_4_83_out1 = fft_Or_64Sx63U_64S_4_80_out1 + s_reg_64;

         // resource: fft_Add_64Ux64U_64U_4  instance: fft_Add_64Ux64U_64U_4_84
         assign fft_Add_64Ux64U_64U_4_84_out1 = fft_Or_64Sx63U_64S_4_81_out1 + fft_Add_64Sx1U_64S_4_82_out1;

         // resource: fft_Sub_64Ux64U_64U_4  instance: fft_Sub_64Ux64U_64U_4_85
         assign fft_Sub_64Ux64U_64U_4_85_out1 = fft_Or_64Sx63U_64S_4_80_out1 - s_reg_64;

         // resource: fft_Sub_64Ux64U_64U_4  instance: fft_Sub_64Ux64U_64U_4_86
         assign fft_Sub_64Ux64U_64U_4_86_out1 = fft_Or_64Sx63U_64S_4_81_out1 - fft_Add_64Sx1U_64S_4_82_out1;

         // thread: drive_fft_Or_64Sx63U_64S_4_87_in2
         assign fft_Or_64Sx63U_64S_4_87_in2 = {s_reg_65[63], 63'd0000000000000000000};

         // thread: drive_fft_Or_64Sx63U_64S_4_87_in1
         assign fft_Or_64Sx63U_64S_4_87_in1 = {s_reg_65[62:1], s_reg_65[0]};

         // resource: fft_Or_64Sx63U_64S_4  instance: fft_Or_64Sx63U_64S_4_87
         assign fft_Or_64Sx63U_64S_4_87_out1 = fft_Or_64Sx63U_64S_4_87_in2 | {1'b0, fft_Or_64Sx63U_64S_4_87_in1};

         // thread: drive_fft_Or_64Sx63U_64S_4_88_in2
         assign fft_Or_64Sx63U_64S_4_88_in2 = {s_reg_66[63], 63'd0000000000000000000};

         // thread: drive_fft_Or_64Sx63U_64S_4_88_in1
         assign fft_Or_64Sx63U_64S_4_88_in1 = {s_reg_66[62:1], s_reg_66[0]};

         // resource: fft_Or_64Sx63U_64S_4  instance: fft_Or_64Sx63U_64S_4_88
         assign fft_Or_64Sx63U_64S_4_88_out1 = fft_Or_64Sx63U_64S_4_88_in2 | {1'b0, fft_Or_64Sx63U_64S_4_88_in1};

         // thread: drive_fft_Or_64Sx63U_64S_4_89_in2
         assign fft_Or_64Sx63U_64S_4_89_in2 = {s_reg_67[63], 63'd0000000000000000000};

         // thread: drive_fft_Or_64Sx63U_64S_4_89_in1
         assign fft_Or_64Sx63U_64S_4_89_in1 = {s_reg_67[62:1], s_reg_67[0]};

         // resource: fft_Or_64Sx63U_64S_4  instance: fft_Or_64Sx63U_64S_4_89
         assign fft_Or_64Sx63U_64S_4_89_out1 = fft_Or_64Sx63U_64S_4_89_in2 | {1'b0, fft_Or_64Sx63U_64S_4_89_in1};

         // thread: drive_fft_Or_64Sx63U_64S_4_90_in2
         assign fft_Or_64Sx63U_64S_4_90_in2 = {s_reg_68[63], 63'd0000000000000000000};

         // thread: drive_fft_Or_64Sx63U_64S_4_90_in1
         assign fft_Or_64Sx63U_64S_4_90_in1 = {s_reg_68[62:1], s_reg_68[0]};

         // resource: fft_Or_64Sx63U_64S_4  instance: fft_Or_64Sx63U_64S_4_90
         assign fft_Or_64Sx63U_64S_4_90_out1 = fft_Or_64Sx63U_64S_4_90_in2 | {1'b0, fft_Or_64Sx63U_64S_4_90_in1};

         // thread: drive_fft_Add_64Sx1U_64S_4_91_in2
         assign fft_Add_64Sx1U_64S_4_91_in2 = s_reg_57[64:1];

         // resource: fft_Add_64Sx1U_64S_4  instance: fft_Add_64Sx1U_64S_4_91
         assign fft_Add_64Sx1U_64S_4_91_out1 = fft_Add_64Sx1U_64S_4_91_in2 + {63'b000000000000000000000000000000000000000000000000000000000000000, s_reg_57[0]};

         // thread: drive_fft_Add_64Sx1U_64S_4_92_in2
         assign fft_Add_64Sx1U_64S_4_92_in2 = s_reg_58[64:1];

         // resource: fft_Add_64Sx1U_64S_4  instance: fft_Add_64Sx1U_64S_4_92
         assign fft_Add_64Sx1U_64S_4_92_out1 = fft_Add_64Sx1U_64S_4_92_in2 + {63'b000000000000000000000000000000000000000000000000000000000000000, s_reg_58[0]};

         // resource: fft_LessThan_32Sx32S_1U_4  instance: fft_LessThan_32Sx32S_1U_4_93
         assign fft_LessThan_32Sx32S_1U_4_93_out1 = s_reg_55[31] ^ (s_reg_44[31] ^ s_reg_55 < s_reg_44);

         // resource: regr_5
         always @(posedge clk)
          begin :drive_global_state1
            if (rst == 1'b0) begin
               global_state1 <= 5'd00;
            end
            else begin
               global_state1 <= global_state1_next;
            end
         end

         // resource: mux_5bx9i
         always @(cfg_done or input_ready_channel_ready or output_ready_channel_valid or s_reg_20 or s_reg_3 or s_reg_31 or s_reg_4 or s_reg_43 or s_reg_47 or s_reg_6 or fft_LessThan_32Sx6S_1U_4_42_out1 or fft_LessThan_32Ux32U_1U_4_48_out1 or fft_LessThanEQ_32Ux32U_1U_4_53_out1 or fft_LessThan_1Sx32S_1U_4_56_out1 or fft_LessThan_32Ux32U_1U_4_58_out1 or fft_LessThan_32Sx32S_1U_4_93_out1 or global_state1)
          begin :drive_global_state1_next
            case (global_state1) 

               5'd00, 5'd01:                begin
                  if (cfg_done) begin
                     global_state1_next = 5'd02;
                  end
                  else begin
                     global_state1_next = 5'd01;
                  end
               end
               
               5'd02:                begin
                  if (input_ready_channel_ready) begin
                     if (s_reg_6) begin
                        /* state28 */
                        case (s_reg_3) 

                           32'd0000000000:                            begin
                              global_state1_next = 5'd20;
                           end
                           
                           default:                            begin
                              case (s_reg_4) 

                                 32'd0000000000:                                  begin
                                    if (fft_LessThanEQ_32Ux32U_1U_4_53_out1) begin
                                       global_state1_next = 5'd19;
                                    end
                                    else begin
                                       global_state1_next = 5'd20;
                                    end
                                 end
                                 
                                 default:                                  begin
                                    if (fft_LessThan_1Sx32S_1U_4_56_out1) begin
                                       global_state1_next = 5'd10;
                                    end
                                    else begin
                                       if (fft_LessThan_32Ux32U_1U_4_58_out1) begin
                                          global_state1_next = 5'd18;
                                       end
                                       else begin
                                          if (fft_LessThanEQ_32Ux32U_1U_4_53_out1) begin
                                             global_state1_next = 5'd19;
                                          end
                                          else begin
                                             global_state1_next = 5'd20;
                                          end
                                       end
                                    end
                                 end
                                 
                              endcase

                           end
                           
                        endcase

                     end
                     else begin
                        global_state1_next = global_state1 + 5'd01;
                     end
                  end
                  else begin
                     global_state1_next = 5'd02;
                  end
               end
               
               5'd04:                begin
                  if (s_reg_20) begin
                     if (fft_LessThan_32Sx6S_1U_4_42_out1) begin
                        global_state1_next = 5'd03;
                     end
                     else begin
                        global_state1_next = global_state1 + 5'd01;
                     end
                  end
                  else begin
                     global_state1_next = global_state1 + 5'd01;
                  end
               end
               
               5'd07:                begin
                  if (s_reg_31) begin
                     global_state1_next = global_state1 + 5'd01;
                  end
                  else begin
                     if (fft_LessThan_32Ux32U_1U_4_48_out1) begin
                        global_state1_next = 5'd03;
                     end
                     else begin
                        /* state27 */
                        case (s_reg_3) 

                           32'd0000000000:                            begin
                              global_state1_next = 5'd20;
                           end
                           
                           default:                            begin
                              case (s_reg_4) 

                                 32'd0000000000:                                  begin
                                    if (fft_LessThanEQ_32Ux32U_1U_4_53_out1) begin
                                       global_state1_next = 5'd19;
                                    end
                                    else begin
                                       global_state1_next = 5'd20;
                                    end
                                 end
                                 
                                 default:                                  begin
                                    if (fft_LessThan_1Sx32S_1U_4_56_out1) begin
                                       global_state1_next = 5'd10;
                                    end
                                    else begin
                                       if (fft_LessThan_32Ux32U_1U_4_58_out1) begin
                                          global_state1_next = 5'd18;
                                       end
                                       else begin
                                          if (fft_LessThanEQ_32Ux32U_1U_4_53_out1) begin
                                             global_state1_next = 5'd19;
                                          end
                                          else begin
                                             global_state1_next = 5'd20;
                                          end
                                       end
                                    end
                                 end
                                 
                              endcase

                           end
                           
                        endcase

                     end
                  end
               end
               
               5'd09:                begin
                  if (fft_LessThan_32Ux32U_1U_4_48_out1) begin
                     global_state1_next = 5'd03;
                  end
                  else begin
                     /* state29 */
                     case (s_reg_3) 

                        32'd0000000000:                         begin
                           global_state1_next = 5'd20;
                        end
                        
                        default:                         begin
                           case (s_reg_4) 

                              32'd0000000000:                               begin
                                 if (fft_LessThanEQ_32Ux32U_1U_4_53_out1) begin
                                    global_state1_next = 5'd19;
                                 end
                                 else begin
                                    global_state1_next = 5'd20;
                                 end
                              end
                              
                              default:                               begin
                                 if (fft_LessThan_1Sx32S_1U_4_56_out1) begin
                                    global_state1_next = global_state1 + 5'd01;
                                 end
                                 else begin
                                    if (fft_LessThan_32Ux32U_1U_4_58_out1) begin
                                       global_state1_next = 5'd18;
                                    end
                                    else begin
                                       if (fft_LessThanEQ_32Ux32U_1U_4_53_out1) begin
                                          global_state1_next = 5'd19;
                                       end
                                       else begin
                                          global_state1_next = 5'd20;
                                       end
                                    end
                                 end
                              end
                              
                           endcase

                        end
                        
                     endcase

                  end
               end
               
               5'd17:                begin
                  if (fft_LessThan_32Sx32S_1U_4_93_out1) begin
                     global_state1_next = 5'd10;
                  end
                  else begin
                     if (s_reg_47) begin
                        global_state1_next = global_state1 + 5'd01;
                     end
                     else begin
                        if (s_reg_43) begin
                           global_state1_next = 5'd19;
                        end
                        else begin
                           global_state1_next = 5'd20;
                        end
                     end
                  end
               end
               
               5'd18:                begin
                  if (fft_LessThan_1Sx32S_1U_4_56_out1) begin
                     global_state1_next = 5'd10;
                  end
                  else begin
                     if (fft_LessThan_32Ux32U_1U_4_58_out1) begin
                        global_state1_next = 5'd18;
                     end
                     else begin
                        if (s_reg_43) begin
                           global_state1_next = global_state1 + 5'd01;
                        end
                        else begin
                           global_state1_next = 5'd20;
                        end
                     end
                  end
               end
               
               5'd19:                begin
                  case (s_reg_4) 

                     32'd0000000000:                      begin
                        if (fft_LessThanEQ_32Ux32U_1U_4_53_out1) begin
                           global_state1_next = 5'd19;
                        end
                        else begin
                           global_state1_next = global_state1 + 5'd01;
                        end
                     end
                     
                     default:                      begin
                        if (fft_LessThan_1Sx32S_1U_4_56_out1) begin
                           global_state1_next = 5'd10;
                        end
                        else begin
                           if (fft_LessThan_32Ux32U_1U_4_58_out1) begin
                              global_state1_next = 5'd18;
                           end
                           else begin
                              if (fft_LessThanEQ_32Ux32U_1U_4_53_out1) begin
                                 global_state1_next = 5'd19;
                              end
                              else begin
                                 global_state1_next = global_state1 + 5'd01;
                              end
                           end
                        end
                     end
                     
                  endcase

               end
               
               5'd20:                begin
                  if (output_ready_channel_valid) begin
                     global_state1_next = global_state1 + 5'd01;
                  end
                  else begin
                     global_state1_next = 5'd20;
                  end
               end
               
               5'd21:                begin
                  global_state1_next = 5'd21;
               end
               
               default:                begin
                  global_state1_next = global_state1 + 5'd01;
               end
               
            endcase

         end

         // resource: mux_2bx3i
         // resource: regr_2
         always @(posedge clk)
          begin :drive_gs_ctrl3
            if (rst == 1'b0) begin
               gs_ctrl3 <= 2'd0;
            end
            else begin
               case (global_state1_next) 

                  5'd04:                   begin
                     gs_ctrl3 <= 2'd1;
                  end
                  
                  5'd07, 5'd09:                   begin
                     gs_ctrl3 <= 2'd2;
                  end
                  
                  default:                   begin
                     gs_ctrl3 <= 2'd0;
                  end
                  
               endcase

            end
         end

         // resource: mux_2bx3i
         // resource: regr_2
         always @(posedge clk)
          begin :drive_gs_ctrl4
            if (rst == 1'b0) begin
               gs_ctrl4 <= 2'd0;
            end
            else begin
               case (global_state1_next) 

                  5'd04:                   begin
                     gs_ctrl4 <= 2'd1;
                  end
                  
                  5'd07, 5'd09:                   begin
                     gs_ctrl4 <= 2'd2;
                  end
                  
                  default:                   begin
                     gs_ctrl4 <= 2'd0;
                  end
                  
               endcase

            end
         end

         // resource: mux_2bx3i
         // resource: regr_2
         always @(posedge clk)
          begin :drive_gs_ctrl5
            if (rst == 1'b0) begin
               gs_ctrl5 <= 2'd0;
            end
            else begin
               case (global_state1_next) 

                  5'd04:                   begin
                     gs_ctrl5 <= 2'd1;
                  end
                  
                  5'd07, 5'd09:                   begin
                     gs_ctrl5 <= 2'd2;
                  end
                  
                  default:                   begin
                     gs_ctrl5 <= 2'd0;
                  end
                  
               endcase

            end
         end

         // resource: mux_2bx3i
         // resource: regr_2
         always @(posedge clk)
          begin :drive_gs_ctrl6
            if (rst == 1'b0) begin
               gs_ctrl6 <= 2'd0;
            end
            else begin
               case (global_state1_next) 

                  5'd04:                   begin
                     gs_ctrl6 <= 2'd1;
                  end
                  
                  5'd07, 5'd09:                   begin
                     gs_ctrl6 <= 2'd2;
                  end
                  
                  default:                   begin
                     gs_ctrl6 <= 2'd0;
                  end
                  
               endcase

            end
         end

         // resource: mux_2bx3i
         // resource: regr_2
         always @(posedge clk)
          begin :drive_gs_ctrl7
            if (rst == 1'b0) begin
               gs_ctrl7 <= 2'd0;
            end
            else begin
               case (global_state1_next) 

                  5'd04:                   begin
                     gs_ctrl7 <= 2'd1;
                  end
                  
                  5'd07, 5'd09:                   begin
                     gs_ctrl7 <= 2'd2;
                  end
                  
                  default:                   begin
                     gs_ctrl7 <= 2'd0;
                  end
                  
               endcase

            end
         end

         // resource: mux_2bx3i
         // resource: regr_2
         always @(posedge clk)
          begin :drive_gs_ctrl8
            if (rst == 1'b0) begin
               gs_ctrl8 <= 2'd0;
            end
            else begin
               case (global_state1_next) 

                  5'd04:                   begin
                     gs_ctrl8 <= 2'd1;
                  end
                  
                  5'd07, 5'd09:                   begin
                     gs_ctrl8 <= 2'd2;
                  end
                  
                  default:                   begin
                     gs_ctrl8 <= 2'd0;
                  end
                  
               endcase

            end
         end

         // resource: mux_2bx3i
         // resource: regr_2
         always @(posedge clk)
          begin :drive_gs_ctrl9
            if (rst == 1'b0) begin
               gs_ctrl9 <= 2'd0;
            end
            else begin
               case (global_state1_next) 

                  5'd04:                   begin
                     gs_ctrl9 <= 2'd1;
                  end
                  
                  5'd07, 5'd09:                   begin
                     gs_ctrl9 <= 2'd2;
                  end
                  
                  default:                   begin
                     gs_ctrl9 <= 2'd0;
                  end
                  
               endcase

            end
         end

         // resource: mux_2bx3i
         // resource: regr_2
         always @(posedge clk)
          begin :drive_gs_ctrl10
            if (rst == 1'b0) begin
               gs_ctrl10 <= 2'd0;
            end
            else begin
               case (global_state1_next) 

                  5'd04:                   begin
                     gs_ctrl10 <= 2'd1;
                  end
                  
                  5'd07, 5'd09:                   begin
                     gs_ctrl10 <= 2'd2;
                  end
                  
                  default:                   begin
                     gs_ctrl10 <= 2'd0;
                  end
                  
               endcase

            end
         end

         // resource: mux_2bx3i
         // resource: regr_2
         always @(posedge clk)
          begin :drive_gs_ctrl11
            if (rst == 1'b0) begin
               gs_ctrl11 <= 2'd0;
            end
            else begin
               case (global_state1_next) 

                  5'd04:                   begin
                     gs_ctrl11 <= 2'd1;
                  end
                  
                  5'd07, 5'd09:                   begin
                     gs_ctrl11 <= 2'd2;
                  end
                  
                  default:                   begin
                     gs_ctrl11 <= 2'd0;
                  end
                  
               endcase

            end
         end

         // resource: mux_2bx3i
         // resource: regr_2
         always @(posedge clk)
          begin :drive_gs_ctrl12
            if (rst == 1'b0) begin
               gs_ctrl12 <= 2'd0;
            end
            else begin
               case (global_state1_next) 

                  5'd04:                   begin
                     gs_ctrl12 <= 2'd1;
                  end
                  
                  5'd07, 5'd09:                   begin
                     gs_ctrl12 <= 2'd2;
                  end
                  
                  default:                   begin
                     gs_ctrl12 <= 2'd0;
                  end
                  
               endcase

            end
         end

         // resource: mux_2bx3i
         // resource: regr_2
         always @(posedge clk)
          begin :drive_gs_ctrl13
            if (rst == 1'b0) begin
               gs_ctrl13 <= 2'd0;
            end
            else begin
               case (global_state1_next) 

                  5'd04:                   begin
                     gs_ctrl13 <= 2'd1;
                  end
                  
                  5'd07, 5'd09:                   begin
                     gs_ctrl13 <= 2'd2;
                  end
                  
                  default:                   begin
                     gs_ctrl13 <= 2'd0;
                  end
                  
               endcase

            end
         end

         // resource: mux_1bx2i
         // resource: regr_1
         always @(posedge clk)
          begin :drive_gs_ctrl14
            if (rst == 1'b0) begin
               gs_ctrl14 <= 1'b0;
            end
            else begin
               case (global_state1_next) 

                  5'd04:                   begin
                     gs_ctrl14 <= 1'b1;
                  end
                  
                  default:                   begin
                     gs_ctrl14 <= 1'b0;
                  end
                  
               endcase

            end
         end

         // resource: mux_2bx3i
         // resource: regr_2
         always @(posedge clk)
          begin :drive_gs_ctrl15
            if (rst == 1'b0) begin
               gs_ctrl15 <= 2'd0;
            end
            else begin
               case (global_state1_next) 

                  5'd04:                   begin
                     gs_ctrl15 <= 2'd1;
                  end
                  
                  5'd07, 5'd09:                   begin
                     gs_ctrl15 <= 2'd2;
                  end
                  
                  default:                   begin
                     gs_ctrl15 <= 2'd0;
                  end
                  
               endcase

            end
         end

         // resource: mux_2bx3i
         // resource: regr_2
         always @(posedge clk)
          begin :drive_gs_ctrl16
            if (rst == 1'b0) begin
               gs_ctrl16 <= 2'd0;
            end
            else begin
               case (global_state1_next) 

                  5'd04:                   begin
                     gs_ctrl16 <= 2'd1;
                  end
                  
                  5'd07, 5'd09:                   begin
                     gs_ctrl16 <= 2'd2;
                  end
                  
                  default:                   begin
                     gs_ctrl16 <= 2'd0;
                  end
                  
               endcase

            end
         end

         // resource: mux_2bx3i
         // resource: regr_2
         always @(posedge clk)
          begin :drive_gs_ctrl17
            if (rst == 1'b0) begin
               gs_ctrl17 <= 2'd0;
            end
            else begin
               case (global_state1_next) 

                  5'd04:                   begin
                     gs_ctrl17 <= 2'd1;
                  end
                  
                  5'd07, 5'd09:                   begin
                     gs_ctrl17 <= 2'd2;
                  end
                  
                  default:                   begin
                     gs_ctrl17 <= 2'd0;
                  end
                  
               endcase

            end
         end

         // resource: mux_2bx3i
         // resource: regr_2
         always @(posedge clk)
          begin :drive_gs_ctrl18
            if (rst == 1'b0) begin
               gs_ctrl18 <= 2'd0;
            end
            else begin
               case (global_state1_next) 

                  5'd04:                   begin
                     gs_ctrl18 <= 2'd1;
                  end
                  
                  5'd07, 5'd09:                   begin
                     gs_ctrl18 <= 2'd2;
                  end
                  
                  default:                   begin
                     gs_ctrl18 <= 2'd0;
                  end
                  
               endcase

            end
         end

         // resource: mux_1bx2i
         // resource: regr_1
         always @(posedge clk)
          begin :drive_gs_ctrl19
            if (rst == 1'b0) begin
               gs_ctrl19 <= 1'b0;
            end
            else begin
               case (global_state1_next) 

                  5'd04:                   begin
                     gs_ctrl19 <= 1'b1;
                  end
                  
                  default:                   begin
                     gs_ctrl19 <= 1'b0;
                  end
                  
               endcase

            end
         end

         // resource: mux_2bx3i
         // resource: regr_2
         always @(posedge clk)
          begin :drive_gs_ctrl20
            if (rst == 1'b0) begin
               gs_ctrl20 <= 2'd0;
            end
            else begin
               case (global_state1_next) 

                  5'd04:                   begin
                     gs_ctrl20 <= 2'd1;
                  end
                  
                  5'd07, 5'd09:                   begin
                     gs_ctrl20 <= 2'd2;
                  end
                  
                  default:                   begin
                     gs_ctrl20 <= 2'd0;
                  end
                  
               endcase

            end
         end

         // resource: mux_2bx4i
         // resource: regr_2
         always @(posedge clk)
          begin :drive_gs_ctrl21
            if (rst == 1'b0) begin
               gs_ctrl21 <= 2'd0;
            end
            else begin
               case (global_state1_next) 

                  5'd06:                   begin
                     gs_ctrl21 <= 2'd1;
                  end
                  
                  5'd11:                   begin
                     gs_ctrl21 <= 2'd2;
                  end
                  
                  5'd13:                   begin
                     gs_ctrl21 <= 2'd3;
                  end
                  
                  default:                   begin
                     gs_ctrl21 <= 2'd0;
                  end
                  
               endcase

            end
         end

         // resource: mux_2bx3i
         // resource: regr_2
         always @(posedge clk)
          begin :drive_gs_ctrl22
            if (rst == 1'b0) begin
               gs_ctrl22 <= 2'd0;
            end
            else begin
               case (global_state1_next) 

                  5'd04:                   begin
                     gs_ctrl22 <= 2'd1;
                  end
                  
                  5'd06, 5'd11, 5'd13:                   begin
                     gs_ctrl22 <= 2'd2;
                  end
                  
                  default:                   begin
                     gs_ctrl22 <= 2'd0;
                  end
                  
               endcase

            end
         end

         // resource: mux_2bx4i
         // resource: regr_2
         always @(posedge clk)
          begin :drive_gs_ctrl23
            if (rst == 1'b0) begin
               gs_ctrl23 <= 2'd0;
            end
            else begin
               case (global_state1_next) 

                  5'd06:                   begin
                     gs_ctrl23 <= 2'd1;
                  end
                  
                  5'd11:                   begin
                     gs_ctrl23 <= 2'd2;
                  end
                  
                  5'd13:                   begin
                     gs_ctrl23 <= 2'd3;
                  end
                  
                  default:                   begin
                     gs_ctrl23 <= 2'd0;
                  end
                  
               endcase

            end
         end

         // resource: mux_2bx3i
         // resource: regr_2
         always @(posedge clk)
          begin :drive_gs_ctrl24
            if (rst == 1'b0) begin
               gs_ctrl24 <= 2'd0;
            end
            else begin
               case (global_state1_next) 

                  5'd04:                   begin
                     gs_ctrl24 <= 2'd1;
                  end
                  
                  5'd06, 5'd11, 5'd13:                   begin
                     gs_ctrl24 <= 2'd2;
                  end
                  
                  default:                   begin
                     gs_ctrl24 <= 2'd0;
                  end
                  
               endcase

            end
         end

         // resource: mux_2bx4i
         // resource: regr_2
         always @(posedge clk)
          begin :drive_gs_ctrl25
            if (rst == 1'b0) begin
               gs_ctrl25 <= 2'd0;
            end
            else begin
               case (global_state1_next) 

                  5'd09:                   begin
                     gs_ctrl25 <= 2'd1;
                  end
                  
                  5'd16:                   begin
                     gs_ctrl25 <= 2'd2;
                  end
                  
                  5'd17:                   begin
                     gs_ctrl25 <= 2'd3;
                  end
                  
                  default:                   begin
                     gs_ctrl25 <= 2'd0;
                  end
                  
               endcase

            end
         end

         // resource: mux_2bx4i
         // resource: regr_2
         always @(posedge clk)
          begin :drive_gs_ctrl26
            if (rst == 1'b0) begin
               gs_ctrl26 <= 2'd0;
            end
            else begin
               case (global_state1_next) 

                  5'd09:                   begin
                     gs_ctrl26 <= 2'd1;
                  end
                  
                  5'd16:                   begin
                     gs_ctrl26 <= 2'd2;
                  end
                  
                  5'd17:                   begin
                     gs_ctrl26 <= 2'd3;
                  end
                  
                  default:                   begin
                     gs_ctrl26 <= 2'd0;
                  end
                  
               endcase

            end
         end

         // resource: mux_1bx2i
         // resource: regr_1
         always @(posedge clk)
          begin :drive_gs_ctrl27
            if (rst == 1'b0) begin
               gs_ctrl27 <= 1'b0;
            end
            else begin
               case (global_state1_next) 

                  5'd08, 5'd09, 5'd16, 5'd17:                   begin
                     gs_ctrl27 <= 1'b1;
                  end
                  
                  default:                   begin
                     gs_ctrl27 <= 1'b0;
                  end
                  
               endcase

            end
         end

         // resource: mux_1bx2i
         // resource: regr_1
         always @(posedge clk)
          begin :drive_gs_ctrl28
            if (rst == 1'b0) begin
               gs_ctrl28 <= 1'b0;
            end
            else begin
               case (global_state1_next) 

                  5'd08, 5'd09, 5'd16, 5'd17:                   begin
                     gs_ctrl28 <= 1'b1;
                  end
                  
                  default:                   begin
                     gs_ctrl28 <= 1'b0;
                  end
                  
               endcase

            end
         end

         // resource: mux_2bx4i
         // resource: regr_2
         always @(posedge clk)
          begin :drive_gs_ctrl29
            if (rst == 1'b0) begin
               gs_ctrl29 <= 2'd0;
            end
            else begin
               case (global_state1_next) 

                  5'd09:                   begin
                     gs_ctrl29 <= 2'd1;
                  end
                  
                  5'd16:                   begin
                     gs_ctrl29 <= 2'd2;
                  end
                  
                  5'd17:                   begin
                     gs_ctrl29 <= 2'd3;
                  end
                  
                  default:                   begin
                     gs_ctrl29 <= 2'd0;
                  end
                  
               endcase

            end
         end

         // resource: mux_2bx4i
         // resource: regr_2
         always @(posedge clk)
          begin :drive_gs_ctrl30
            if (rst == 1'b0) begin
               gs_ctrl30 <= 2'd0;
            end
            else begin
               case (global_state1_next) 

                  5'd09:                   begin
                     gs_ctrl30 <= 2'd1;
                  end
                  
                  5'd16:                   begin
                     gs_ctrl30 <= 2'd2;
                  end
                  
                  5'd17:                   begin
                     gs_ctrl30 <= 2'd3;
                  end
                  
                  default:                   begin
                     gs_ctrl30 <= 2'd0;
                  end
                  
               endcase

            end
         end

         // resource: mux_1bx2i
         // resource: regr_1
         always @(posedge clk)
          begin :drive_gs_ctrl31
            if (rst == 1'b0) begin
               gs_ctrl31 <= 1'b0;
            end
            else begin
               case (global_state1_next) 

                  5'd08, 5'd09, 5'd16, 5'd17:                   begin
                     gs_ctrl31 <= 1'b1;
                  end
                  
                  default:                   begin
                     gs_ctrl31 <= 1'b0;
                  end
                  
               endcase

            end
         end

         // resource: mux_1bx2i
         // resource: regr_1
         always @(posedge clk)
          begin :drive_gs_ctrl32
            if (rst == 1'b0) begin
               gs_ctrl32 <= 1'b0;
            end
            else begin
               case (global_state1_next) 

                  5'd08, 5'd09, 5'd16, 5'd17:                   begin
                     gs_ctrl32 <= 1'b1;
                  end
                  
                  default:                   begin
                     gs_ctrl32 <= 1'b0;
                  end
                  
               endcase

            end
         end

         // resource: mux_1bx2i
         // resource: regr_1
         always @(posedge clk)
          begin :drive_gs_ctrl33
            if (rst == 1'b0) begin
               gs_ctrl33 <= 1'b0;
            end
            else begin
               case (global_state1_next) 

                  5'd18:                   begin
                     gs_ctrl33 <= 1'b1;
                  end
                  
                  default:                   begin
                     gs_ctrl33 <= 1'b0;
                  end
                  
               endcase

            end
         end

         // resource: mux_1bx2i
         // resource: regr_1
         always @(posedge clk)
          begin :drive_gs_ctrl34
            if (rst == 1'b0) begin
               gs_ctrl34 <= 1'b0;
            end
            else begin
               case (global_state1_next) 

                  5'd18:                   begin
                     gs_ctrl34 <= 1'b1;
                  end
                  
                  default:                   begin
                     gs_ctrl34 <= 1'b0;
                  end
                  
               endcase

            end
         end

         // resource: mux_1bx2i
         // resource: regr_1
         always @(posedge clk)
          begin :drive_gs_ctrl35
            if (rst == 1'b0) begin
               gs_ctrl35 <= 1'b0;
            end
            else begin
               case (global_state1_next) 

                  5'd18:                   begin
                     gs_ctrl35 <= 1'b1;
                  end
                  
                  default:                   begin
                     gs_ctrl35 <= 1'b0;
                  end
                  
               endcase

            end
         end

         // resource: mux_1bx2i
         // resource: regr_1
         always @(posedge clk)
          begin :drive_gs_ctrl36
            if (rst == 1'b0) begin
               gs_ctrl36 <= 1'b0;
            end
            else begin
               case (global_state1_next) 

                  5'd18:                   begin
                     gs_ctrl36 <= 1'b1;
                  end
                  
                  default:                   begin
                     gs_ctrl36 <= 1'b0;
                  end
                  
               endcase

            end
         end

         // resource: mux_1bx2i
         // resource: regr_1
         always @(posedge clk)
          begin :drive_gs_ctrl37
            if (rst == 1'b0) begin
               gs_ctrl37 <= 1'b0;
            end
            else begin
               case (global_state1_next) 

                  5'd18:                   begin
                     gs_ctrl37 <= 1'b1;
                  end
                  
                  default:                   begin
                     gs_ctrl37 <= 1'b0;
                  end
                  
               endcase

            end
         end

         // resource: mux_2bx3i
         // resource: regr_2
         always @(posedge clk)
          begin :drive_gs_ctrl38
            if (rst == 1'b0) begin
               gs_ctrl38 <= 2'd0;
            end
            else begin
               case (global_state1_next) 

                  5'd17:                   begin
                     gs_ctrl38 <= 2'd1;
                  end
                  
                  5'd18:                   begin
                     gs_ctrl38 <= 2'd2;
                  end
                  
                  default:                   begin
                     gs_ctrl38 <= 2'd0;
                  end
                  
               endcase

            end
         end

         // resource: mux_1bx2i
         // resource: regr_1
         always @(posedge clk)
          begin :drive_gs_ctrl39
            if (rst == 1'b0) begin
               gs_ctrl39 <= 1'b0;
            end
            else begin
               case (global_state1_next) 

                  5'd17:                   begin
                     gs_ctrl39 <= 1'b1;
                  end
                  
                  default:                   begin
                     gs_ctrl39 <= 1'b0;
                  end
                  
               endcase

            end
         end

         // resource: mux_1bx2i
         // resource: regr_1
         always @(posedge clk)
          begin :drive_gs_ctrl40
            if (rst == 1'b0) begin
               gs_ctrl40 <= 1'b0;
            end
            else begin
               case (global_state1_next) 

                  5'd17, 5'd18:                   begin
                     gs_ctrl40 <= 1'b1;
                  end
                  
                  default:                   begin
                     gs_ctrl40 <= 1'b0;
                  end
                  
               endcase

            end
         end

         // resource: mux_1bx2i
         // resource: regr_1
         always @(posedge clk)
          begin :drive_gs_ctrl41
            if (rst == 1'b0) begin
               gs_ctrl41 <= 1'b0;
            end
            else begin
               case (global_state1_next) 

                  5'd17:                   begin
                     gs_ctrl41 <= 1'b1;
                  end
                  
                  default:                   begin
                     gs_ctrl41 <= 1'b0;
                  end
                  
               endcase

            end
         end

         // resource: mux_1bx2i
         // resource: regr_1
         always @(posedge clk)
          begin :drive_gs_ctrl42
            if (rst == 1'b0) begin
               gs_ctrl42 <= 1'b0;
            end
            else begin
               case (global_state1_next) 

                  5'd17, 5'd18:                   begin
                     gs_ctrl42 <= 1'b1;
                  end
                  
                  default:                   begin
                     gs_ctrl42 <= 1'b0;
                  end
                  
               endcase

            end
         end

         // resource: mux_1bx2i
         // resource: regr_1
         always @(posedge clk)
          begin :drive_gs_ctrl43
            if (rst == 1'b0) begin
               gs_ctrl43 <= 1'b0;
            end
            else begin
               case (global_state1_next) 

                  5'd17:                   begin
                     gs_ctrl43 <= 1'b1;
                  end
                  
                  default:                   begin
                     gs_ctrl43 <= 1'b0;
                  end
                  
               endcase

            end
         end

         // resource: mux_1bx2i
         // resource: regr_1
         always @(posedge clk)
          begin :drive_gs_ctrl44
            if (rst == 1'b0) begin
               gs_ctrl44 <= 1'b0;
            end
            else begin
               case (global_state1_next) 

                  5'd17, 5'd18:                   begin
                     gs_ctrl44 <= 1'b1;
                  end
                  
                  default:                   begin
                     gs_ctrl44 <= 1'b0;
                  end
                  
               endcase

            end
         end

         // resource: mux_1bx2i
         // resource: regr_1
         always @(posedge clk)
          begin :drive_gs_ctrl45
            if (rst == 1'b0) begin
               gs_ctrl45 <= 1'b0;
            end
            else begin
               case (global_state1_next) 

                  5'd17:                   begin
                     gs_ctrl45 <= 1'b1;
                  end
                  
                  default:                   begin
                     gs_ctrl45 <= 1'b0;
                  end
                  
               endcase

            end
         end

         // resource: mux_1bx2i
         // resource: regr_1
         always @(posedge clk)
          begin :drive_gs_ctrl46
            if (rst == 1'b0) begin
               gs_ctrl46 <= 1'b0;
            end
            else begin
               case (global_state1_next) 

                  5'd17, 5'd18:                   begin
                     gs_ctrl46 <= 1'b1;
                  end
                  
                  default:                   begin
                     gs_ctrl46 <= 1'b0;
                  end
                  
               endcase

            end
         end

         // resource: mux_1bx2i
         // resource: regr_1
         always @(posedge clk)
          begin :drive_gs_ctrl47
            if (rst == 1'b0) begin
               gs_ctrl47 <= 1'b0;
            end
            else begin
               case (global_state1_next) 

                  5'd17:                   begin
                     gs_ctrl47 <= 1'b1;
                  end
                  
                  default:                   begin
                     gs_ctrl47 <= 1'b0;
                  end
                  
               endcase

            end
         end

         // resource: mux_64bx2i
         // resource: regr_64
         always @(posedge clk)
          begin :drive_dma_write_chnl_data
            if (rst == 1'b0) begin
               dma_write_chnl_data <= 64'd00000000000000000000;
            end
            else begin
               case (global_state2) 

                  4'd05:                   begin
                     if (fft_Or_1Ux1U_1U_4_118_out1) begin
                        dma_write_chnl_data <= hi_A0_1_Q3;
                     end
                  end
                  
                  4'd06:                   begin
                     if (fft_Or_1Ux1U_1U_4_118_out1) begin
                        dma_write_chnl_data <= s_reg_82;
                     end
                  end
                  
               endcase

            end
         end

         // resource: regr_2
         always @(posedge clk)
          begin :drive_dma_write_ctrl_data_size
            if (rst == 1'b0) begin
               dma_write_ctrl_data_size_slice <= 2'd0;
            end
            else begin
               case (global_state2) 

                  4'd03:                   begin
                     if (output_ready_channel_ready) begin
                        dma_write_ctrl_data_size_slice <= 2'd3;
                     end
                  end
                  
               endcase

            end
         end

         // resource: regr_31
         always @(posedge clk)
          begin :drive_dma_write_ctrl_data_length
            if (rst == 1'b0) begin
               dma_write_ctrl_data_length_slice <= 31'd0000000000;
            end
            else begin
               case (global_state2) 

                  4'd03:                   begin
                     if (output_ready_channel_ready) begin
                        dma_write_ctrl_data_length_slice <= fft_LeftShift_2Sx5U_31S_4_119_out1;
                     end
                  end
                  
               endcase

            end
         end

         // resource: mux_1bx2i
         // resource: regr_1
         always @(posedge clk)
          begin :drive_dma_write_ctrl_valid
            if (rst == 1'b0) begin
               dma_write_ctrl_valid <= 1'd0;
            end
            else begin
               case (global_state2) 

                  4'd03:                   begin
                     if (output_ready_channel_ready) begin
                        dma_write_ctrl_valid <= 1'd1;
                     end
                  end
                  
                  4'd04:                   begin
                     if (dma_write_ctrl_ready) begin
                        dma_write_ctrl_valid <= 1'd0;
                     end
                  end
                  
               endcase

            end
         end

         // resource: mux_1bx2i
         // resource: regr_1
         always @(posedge clk)
          begin :drive_acc_done
            if (rst == 1'b0) begin
               acc_done <= 1'd0;
            end
            else begin
               case (global_state2) 

                  4'd04:                   begin
                     if (dma_write_ctrl_ready && 31'd0000000000 == s_reg_77) begin
                        acc_done <= 1'd1;
                     end
                  end
                  
                  4'd05, 4'd06:                   begin
                     if (fft_Or_1Ux1U_1U_4_118_out1 && !fft_LessThan_16Ux32U_1U_4_121_out1) begin
                        acc_done <= 1'd1;
                     end
                  end
                  
                  4'd07:                   begin
                     acc_done <= 1'd0;
                  end
                  
               endcase

            end
         end

         // resource: regr_1
         always @(posedge clk)
          begin :drive_dma_write_chnl_set_valid_curr
            if (rst == 1'b0) begin
               dma_write_chnl_set_valid_curr <= 1'd0;
            end
            else begin
               case (global_state2) 

                  4'd05, 4'd06:                   begin
                     if (fft_Or_1Ux1U_1U_4_118_out1) begin
                        dma_write_chnl_set_valid_curr <= fft_Not_1U_1U_4_122_out1;
                     end
                  end
                  
               endcase

            end
         end

         // resource: mux_1bx2i
         // resource: regr_1
         always @(posedge clk)
          begin :drive_output_ready_channel_valid
            if (rst == 1'b0) begin
               output_ready_channel_valid <= 1'd0;
            end
            else begin
               case (global_state2) 

                  4'd02:                   begin
                     output_ready_channel_valid <= 1'd1;
                  end
                  
                  4'd03:                   begin
                     if (output_ready_channel_ready) begin
                        output_ready_channel_valid <= 1'd0;
                     end
                  end
                  
               endcase

            end
         end

         // resource: regr_5
         always @(posedge clk)
          begin :drive_s_reg_76
            if (rst == 1'b0) begin
               s_reg_76_slice <= 5'd00;
            end
            else begin
               case (global_state2) 

                  4'd00, 4'd01:                   begin
                     s_reg_76_slice <= conf_info_log_len[4:0];
                  end
                  
               endcase

            end
         end

         // resource: regr_31
         always @(posedge clk)
          begin :drive_s_reg_77
            if (rst == 1'b0) begin
               s_reg_77 <= 31'd0000000000;
            end
            else begin
               case (global_state2) 

                  4'd03:                   begin
                     s_reg_77 <= fft_LeftShift_2Sx5U_31S_4_119_out1;
                  end
                  
               endcase

            end
         end

         // resource: regr_16
         always @(posedge clk)
          begin :drive_s_reg_81
            if (rst == 1'b0) begin
               s_reg_81 <= 16'd00000;
            end
            else begin
               case (global_state2) 

                  4'd04:                   begin
                     if (31'd0000000000 != s_reg_77) begin
                        s_reg_81 <= fft_Add_16Ux2S_16U_4_120_out1;
                     end
                  end
                  
                  4'd05, 4'd06:                   begin
                     if (fft_Or_1Ux1U_1U_4_118_out1) begin
                        s_reg_81 <= fft_Add_16Ux2S_16U_4_120_out1;
                     end
                  end
                  
               endcase

            end
         end

         // resource: regr_64
         always @(posedge clk)
          begin :drive_s_reg_82
            if (rst == 1'b0) begin
               s_reg_82 <= 64'd00000000000000000000;
            end
            else begin
               case (global_state2) 

                  4'd05:                   begin
                     s_reg_82 <= hi_A0_1_Q3;
                  end
                  
               endcase

            end
         end

         // resource: fft_LeftShift_2Sx5U_31S_4  instance: fft_LeftShift_2Sx5U_31S_4_119
         assign fft_LeftShift_2Sx5U_31S_4_119_out1 = 31'd0000000001 << s_reg_76_slice;

         // resource: mux_16bx2i
         always @(s_reg_81 or gs_ctrl48)
          begin :drive_fft_Add_16Ux2S_16U_4_120_in2
            if (gs_ctrl48) begin
               fft_Add_16Ux2S_16U_4_120_in2 = s_reg_81;
            end
            else begin
               fft_Add_16Ux2S_16U_4_120_in2 = 16'd00000;
            end
         end

         // resource: fft_Add_16Ux2S_16U_4  instance: fft_Add_16Ux2S_16U_4_120
         assign fft_Add_16Ux2S_16U_4_120_out1 = fft_Add_16Ux2S_16U_4_120_in2 + 16'd00001;

         // resource: mux_1bx2i
         always @(dma_write_ctrl_ready or fft_Or_1Ux1U_1U_4_118_out1 or s_reg_77 or fft_LessThan_16Ux32U_1U_4_121_out1 or gs_ctrl50)
          begin :drive_fft_plm_block_in_fx64_A0_5_18_CE3
            case (gs_ctrl50) 

               2'd1:                begin
                  if (dma_write_ctrl_ready && 31'd0000000000 != s_reg_77) begin
                     fft_plm_block_in_fx64_A0_5_18_CE3 = 1'd1;
                  end
                  else begin
                     fft_plm_block_in_fx64_A0_5_18_CE3 = 1'd0;
                  end
               end
               
               2'd2:                begin
                  if (fft_Or_1Ux1U_1U_4_118_out1 && fft_LessThan_16Ux32U_1U_4_121_out1) begin
                     fft_plm_block_in_fx64_A0_5_18_CE3 = 1'd1;
                  end
                  else begin
                     fft_plm_block_in_fx64_A0_5_18_CE3 = 1'd0;
                  end
               end
               
               default:                begin
                  fft_plm_block_in_fx64_A0_5_18_CE3 = 1'd0;
               end
               
            endcase

         end

         // thread: drive_fft_LessThan_16Ux32U_1U_4_121_in1
         assign fft_LessThan_16Ux32U_1U_4_121_in1 = {s_reg_77, 1'b0};

         // resource: fft_LessThan_16Ux32U_1U_4  instance: fft_LessThan_16Ux32U_1U_4_121
         assign fft_LessThan_16Ux32U_1U_4_121_out1 = {16'b0000000000000000, s_reg_81} < fft_LessThan_16Ux32U_1U_4_121_in1;

         // resource: fft_Not_1U_1U_4  instance: fft_Not_1U_1U_4_122
         assign fft_Not_1U_1U_4_122_out1 = !dma_write_chnl_set_valid_curr;

         // resource: regr_4
         always @(posedge clk)
          begin :drive_global_state2
            if (rst == 1'b0) begin
               global_state2 <= 4'd00;
            end
            else begin
               global_state2 <= global_state2_next;
            end
         end

         // resource: mux_4bx9i
         always @(dma_write_ctrl_ready or cfg_done or output_ready_channel_ready or fft_Or_1Ux1U_1U_4_118_out1 or s_reg_77 or fft_LessThan_16Ux32U_1U_4_121_out1 or global_state2)
          begin :drive_global_state2_next
            case (global_state2) 

               4'd00, 4'd01:                begin
                  if (cfg_done) begin
                     global_state2_next = 4'd02;
                  end
                  else begin
                     global_state2_next = 4'd01;
                  end
               end
               
               4'd03:                begin
                  if (output_ready_channel_ready) begin
                     global_state2_next = global_state2 + 4'd01;
                  end
                  else begin
                     global_state2_next = 4'd03;
                  end
               end
               
               4'd04:                begin
                  if (dma_write_ctrl_ready) begin
                     case (s_reg_77) 

                        31'd0000000000:                         begin
                           global_state2_next = 4'd07;
                        end
                        
                        default:                         begin
                           global_state2_next = global_state2 + 4'd01;
                        end
                        
                     endcase

                  end
                  else begin
                     global_state2_next = 4'd04;
                  end
               end
               
               4'd05, 4'd06:                begin
                  if (fft_Or_1Ux1U_1U_4_118_out1) begin
                     if (fft_LessThan_16Ux32U_1U_4_121_out1) begin
                        global_state2_next = 4'd05;
                     end
                     else begin
                        global_state2_next = 4'd07;
                     end
                  end
                  else begin
                     global_state2_next = 4'd06;
                  end
               end
               
               4'd07, 4'd08:                begin
                  global_state2_next = 4'd08;
               end
               
               default:                begin
                  global_state2_next = global_state2 + 4'd01;
               end
               
            endcase

         end

         // resource: mux_1bx2i
         // resource: regr_1
         always @(posedge clk)
          begin :drive_gs_ctrl48
            if (rst == 1'b0) begin
               gs_ctrl48 <= 1'b0;
            end
            else begin
               case (global_state2_next) 

                  4'd05, 4'd06:                   begin
                     gs_ctrl48 <= 1'b1;
                  end
                  
                  default:                   begin
                     gs_ctrl48 <= 1'b0;
                  end
                  
               endcase

            end
         end

         // resource: mux_1bx2i
         // resource: regr_1
         always @(posedge clk)
          begin :drive_gs_ctrl49
            if (rst == 1'b0) begin
               gs_ctrl49 <= 1'b0;
            end
            else begin
               case (global_state2_next) 

                  4'd05, 4'd06:                   begin
                     gs_ctrl49 <= 1'b1;
                  end
                  
                  default:                   begin
                     gs_ctrl49 <= 1'b0;
                  end
                  
               endcase

            end
         end

         // resource: mux_2bx3i
         // resource: regr_2
         always @(posedge clk)
          begin :drive_gs_ctrl50
            if (rst == 1'b0) begin
               gs_ctrl50 <= 2'd0;
            end
            else begin
               case (global_state2_next) 

                  4'd04:                   begin
                     gs_ctrl50 <= 2'd1;
                  end
                  
                  4'd05, 4'd06:                   begin
                     gs_ctrl50 <= 2'd2;
                  end
                  
                  default:                   begin
                     gs_ctrl50 <= 2'd0;
                  end
                  
               endcase

            end
         end

         // resource: regr_64
         always @(posedge clk or negedge rst)
          begin :drive_dma_read_chnl_data_buf
            if (rst == 1'b0) begin
               dma_read_chnl_data_buf <= 64'd00000000000000000000;
            end
            else begin
               dma_read_chnl_data_buf <= fft_N_MuxB_64_2_0_4_102_out1;
            end
         end

         // resource: regr_1
         always @(posedge clk or negedge rst)
          begin :drive_dma_read_chnl_sync_rcv_set_ready_prev
            if (rst == 1'b0) begin
               dma_read_chnl_sync_rcv_set_ready_prev <= 1'd0;
            end
            else begin
               dma_read_chnl_sync_rcv_set_ready_prev <= dma_read_chnl_set_ready_curr;
            end
         end

         // resource: regr_1
         always @(posedge clk or negedge rst)
          begin :drive_dma_read_chnl_sync_rcv_reset_ready_prev
            if (rst == 1'b0) begin
               dma_read_chnl_sync_rcv_reset_ready_prev <= 1'd0;
            end
            else begin
               dma_read_chnl_sync_rcv_reset_ready_prev <= dma_read_chnl_sync_rcv_reset_ready_curr;
            end
         end

         // resource: regr_1
         always @(posedge clk or negedge rst)
          begin :drive_dma_read_chnl_sync_rcv_reset_ready_curr
            if (rst == 1'b0) begin
               dma_read_chnl_sync_rcv_reset_ready_curr <= 1'd0;
            end
            else begin
               dma_read_chnl_sync_rcv_reset_ready_curr <= fft_N_Muxb_1_2_5_4_101_out1;
            end
         end

         // resource: regr_1
         always @(posedge clk or negedge rst)
          begin :drive_dma_read_chnl_sync_rcv_ready_flop
            if (rst == 1'b0) begin
               dma_read_chnl_sync_rcv_ready_flop <= 1'd1;
            end
            else begin
               dma_read_chnl_sync_rcv_ready_flop <= dma_read_chnl_ready;
            end
         end

         // resource: fft_Not_1U_1U_4  instance: fft_Not_1U_1U_4_99
         assign fft_Not_1U_1U_4_99_out1 = !dma_read_chnl_sync_rcv_reset_ready_curr;

         // resource: fft_And_1Ux1U_1U_4  instance: fft_And_1Ux1U_1U_4_100
         assign fft_And_1Ux1U_1U_4_100_out1 = dma_read_chnl_valid & dma_read_chnl_ready;

         // resource:fft_N_Muxb_1_2_5_4
         always @(dma_read_chnl_sync_rcv_reset_ready_curr or fft_Not_1U_1U_4_99_out1 or fft_And_1Ux1U_1U_4_100_out1)
          begin :fft_N_Muxb_1_2_5_4_101
            if (fft_And_1Ux1U_1U_4_100_out1) begin
               fft_N_Muxb_1_2_5_4_101_out1 = fft_Not_1U_1U_4_99_out1;
            end
            else begin
               fft_N_Muxb_1_2_5_4_101_out1 = dma_read_chnl_sync_rcv_reset_ready_curr;
            end
         end

         // resource:fft_N_MuxB_64_2_0_4
         always @(dma_read_chnl_data or dma_read_chnl_data_buf or fft_And_1Ux1U_1U_4_100_out1)
          begin :fft_N_MuxB_64_2_0_4_102
            if (fft_And_1Ux1U_1U_4_100_out1) begin
               fft_N_MuxB_64_2_0_4_102_out1 = dma_read_chnl_data;
            end
            else begin
               fft_N_MuxB_64_2_0_4_102_out1 = dma_read_chnl_data_buf;
            end
         end

         // thread: drive_dma_read_chnl_ready
         assign dma_read_chnl_ready = fft_Or_1Ux1U_1U_4_98_out1;

         // resource: fft_Xor_1Ux1U_1U_4  instance: fft_Xor_1Ux1U_1U_4_94
         assign fft_Xor_1Ux1U_1U_4_94_out1 = dma_read_chnl_sync_rcv_reset_ready_curr ^ dma_read_chnl_sync_rcv_reset_ready_prev;

         // resource: fft_Not_1U_1U_4  instance: fft_Not_1U_1U_4_95
         assign fft_Not_1U_1U_4_95_out1 = !fft_Xor_1Ux1U_1U_4_94_out1;

         // resource: fft_And_1Ux1U_1U_4  instance: fft_And_1Ux1U_1U_4_96
         assign fft_And_1Ux1U_1U_4_96_out1 = fft_Not_1U_1U_4_95_out1 & dma_read_chnl_sync_rcv_ready_flop;

         // resource: fft_Xor_1Ux1U_1U_4  instance: fft_Xor_1Ux1U_1U_4_97
         assign fft_Xor_1Ux1U_1U_4_97_out1 = dma_read_chnl_set_ready_curr ^ dma_read_chnl_sync_rcv_set_ready_prev;

         // resource: fft_Or_1Ux1U_1U_4  instance: fft_Or_1Ux1U_1U_4_98
         assign fft_Or_1Ux1U_1U_4_98_out1 = fft_Xor_1Ux1U_1U_4_97_out1 | fft_And_1Ux1U_1U_4_96_out1;

         // resource: fft_Not_1U_1U_4  instance: fft_Not_1U_1U_4_103
         assign fft_Not_1U_1U_4_103_out1 = !dma_read_chnl_ready;

         // resource: fft_Or_1Ux1U_1U_4  instance: fft_Or_1Ux1U_1U_4_104
         assign fft_Or_1Ux1U_1U_4_104_out1 = fft_Not_1U_1U_4_103_out1 | dma_read_chnl_valid;

         // resource: regr_1
         always @(posedge clk or negedge rst)
          begin :drive_dma_write_chnl_sync_snd_set_valid_prev
            if (rst == 1'b0) begin
               dma_write_chnl_sync_snd_set_valid_prev <= 1'd0;
            end
            else begin
               dma_write_chnl_sync_snd_set_valid_prev <= dma_write_chnl_set_valid_curr;
            end
         end

         // resource: regr_1
         always @(posedge clk or negedge rst)
          begin :drive_dma_write_chnl_sync_snd_reset_valid_prev
            if (rst == 1'b0) begin
               dma_write_chnl_sync_snd_reset_valid_prev <= 1'd0;
            end
            else begin
               dma_write_chnl_sync_snd_reset_valid_prev <= dma_write_chnl_sync_snd_reset_valid_curr;
            end
         end

         // resource: regr_1
         always @(posedge clk or negedge rst)
          begin :drive_dma_write_chnl_sync_snd_reset_valid_curr
            if (rst == 1'b0) begin
               dma_write_chnl_sync_snd_reset_valid_curr <= 1'd0;
            end
            else begin
               dma_write_chnl_sync_snd_reset_valid_curr <= fft_N_Muxb_1_2_5_4_116_out1;
            end
         end

         // resource: regr_1
         always @(posedge clk or negedge rst)
          begin :drive_dma_write_chnl_sync_snd_valid_flop
            if (rst == 1'b0) begin
               dma_write_chnl_sync_snd_valid_flop <= 1'd0;
            end
            else begin
               dma_write_chnl_sync_snd_valid_flop <= dma_write_chnl_valid;
            end
         end

         // resource: fft_Not_1U_1U_4  instance: fft_Not_1U_1U_4_115
         assign fft_Not_1U_1U_4_115_out1 = !dma_write_chnl_sync_snd_reset_valid_curr;

         // resource:fft_N_Muxb_1_2_5_4
         always @(dma_write_chnl_ready or dma_write_chnl_sync_snd_reset_valid_curr or fft_Not_1U_1U_4_115_out1)
          begin :fft_N_Muxb_1_2_5_4_116
            if (dma_write_chnl_ready) begin
               fft_N_Muxb_1_2_5_4_116_out1 = fft_Not_1U_1U_4_115_out1;
            end
            else begin
               fft_N_Muxb_1_2_5_4_116_out1 = dma_write_chnl_sync_snd_reset_valid_curr;
            end
         end

         // thread: drive_dma_write_chnl_valid
         assign dma_write_chnl_valid = fft_Or_1Ux1U_1U_4_114_out1;

         // resource: fft_Xor_1Ux1U_1U_4  instance: fft_Xor_1Ux1U_1U_4_110
         assign fft_Xor_1Ux1U_1U_4_110_out1 = dma_write_chnl_sync_snd_reset_valid_curr ^ dma_write_chnl_sync_snd_reset_valid_prev;

         // resource: fft_Not_1U_1U_4  instance: fft_Not_1U_1U_4_111
         assign fft_Not_1U_1U_4_111_out1 = !fft_Xor_1Ux1U_1U_4_110_out1;

         // resource: fft_And_1Ux1U_1U_4  instance: fft_And_1Ux1U_1U_4_112
         assign fft_And_1Ux1U_1U_4_112_out1 = fft_Not_1U_1U_4_111_out1 & dma_write_chnl_sync_snd_valid_flop;

         // resource: fft_Xor_1Ux1U_1U_4  instance: fft_Xor_1Ux1U_1U_4_113
         assign fft_Xor_1Ux1U_1U_4_113_out1 = dma_write_chnl_set_valid_curr ^ dma_write_chnl_sync_snd_set_valid_prev;

         // resource: fft_Or_1Ux1U_1U_4  instance: fft_Or_1Ux1U_1U_4_114
         assign fft_Or_1Ux1U_1U_4_114_out1 = fft_Xor_1Ux1U_1U_4_113_out1 | fft_And_1Ux1U_1U_4_112_out1;

         // resource: fft_Not_1U_1U_4  instance: fft_Not_1U_1U_4_117
         assign fft_Not_1U_1U_4_117_out1 = !dma_write_chnl_valid;

         // resource: fft_Or_1Ux1U_1U_4  instance: fft_Or_1Ux1U_1U_4_118
         assign fft_Or_1Ux1U_1U_4_118_out1 = fft_Not_1U_1U_4_117_out1 | dma_write_chnl_ready;

         // resource: regr_1
         always @(posedge clk)
          begin :drive_cfg_done
            if (rst == 1'b0) begin
               cfg_done <= 1'd0;
            end
            else begin
               case (global_state3) 

                  2'd1:                   begin
                     if (conf_done) begin
                        cfg_done <= 1'd1;
                     end
                  end
                  
               endcase

            end
         end

         // resource: regr_2
         always @(posedge clk)
          begin :drive_global_state3
            if (rst == 1'b0) begin
               global_state3 <= 2'd0;
            end
            else begin
               global_state3 <= cfg_config_accelerator_next;
            end
         end

         // resource: mux_2bx3i
         always @(conf_done or global_state3)
          begin :drive_cfg_config_accelerator_next
            case (global_state3) 

               2'd1:                begin
                  if (conf_done) begin
                     cfg_config_accelerator_next = global_state3 + 2'd1;
                  end
                  else begin
                     cfg_config_accelerator_next = 2'd1;
                  end
               end
               
               2'd2:                begin
                  cfg_config_accelerator_next = 2'd2;
               end
               
               default:                begin
                  cfg_config_accelerator_next = global_state3 + 2'd1;
               end
               
            endcase

         end

         fft_plm_block_in_fx64 hi_A0_1(
                                 .CLK( clk ),
                                 .WE0( fft_plm_block_in_fx64_A0_1_1_WE0 ),
                                 .CE0( fft_plm_block_in_fx64_A0_1_1_CE0 ),
                                 .D0( fft_plm_block_in_fx64_A0_1_1_D0 ),
                                 .A0( fft_plm_block_in_fx64_A0_1_1_A0 ),
                                 .WEM0( fft_plm_block_in_fx64_A0_1_1_WEM0 ),
                                 .WE1( hi_A0_1_WE1 ),
                                 .CE1( hi_A0_1_CE1 ),
                                 .D1( hi_A0_1_D1 ),
                                 .A1( hi_A0_1_A1 ),
                                 .WEM1( hi_A0_1_WEM1 ),
                                 .CE2( fft_plm_block_in_fx64_A0_1_1_CE2 ),
                                 .Q2( hi_A0_1_Q2 ),
                                 .A2( fft_plm_block_in_fx64_A0_1_1_A2 ),
                                 .CE3( hi_A0_1_CE3 ),
                                 .Q3( hi_A0_1_Q3 ),
                                 .A3( hi_A0_1_A3 )
                               );

         // resource: mux_15bx6i
         always @(s_reg_1[13:0] or s_reg_28[13:0] or s_reg_52 or s_reg_56 or s_reg_81[14:0] or fft_plm_block_in_fx64_A0_5_18_CE3 or gs_ctrl21 or gs_ctrl49)
          begin :mux_hi_A0_1_3_inputs_hi_A0_1_A3
            if (fft_plm_block_in_fx64_A0_5_18_CE3) begin
               if (gs_ctrl49) begin
                  hi_A0_1_A3 = s_reg_81[14:0];
               end
               else begin
                  hi_A0_1_A3 = 15'd00000;
               end
            end
            else begin
               case (gs_ctrl21) 

                  2'd1:                   begin
                     hi_A0_1_A3 = {s_reg_28[13:0], 1'b0};
                  end
                  
                  2'd2:                   begin
                     hi_A0_1_A3 = {s_reg_52, 1'b0};
                  end
                  
                  2'd3:                   begin
                     hi_A0_1_A3 = {s_reg_56, 1'b0};
                  end
                  
                  default:                   begin
                     hi_A0_1_A3 = {s_reg_1[13:0], 1'b0};
                  end
                  
               endcase

            end
         end

         // resource: mux_1bx3i
         always @(s_reg_20 or s_reg_5 or fft_LessThan_32Sx6S_1U_4_42_out1 or fft_plm_block_in_fx64_A0_5_18_CE3 or gs_ctrl22)
          begin :mux_hi_A0_1_3_inputs_hi_A0_1_CE3
            if (fft_plm_block_in_fx64_A0_5_18_CE3) begin
               hi_A0_1_CE3 = fft_plm_block_in_fx64_A0_5_18_CE3;
            end
            else begin
               case (gs_ctrl22) 

                  2'd1:                   begin
                     if (s_reg_20) begin
                        if (!fft_LessThan_32Sx6S_1U_4_42_out1 && s_reg_5 != 32'd0000000000) begin
                           hi_A0_1_CE3 = 1'd1;
                        end
                        else begin
                           hi_A0_1_CE3 = 1'd0;
                        end
                     end
                     else begin
                        if (s_reg_5 != 32'd0000000000) begin
                           hi_A0_1_CE3 = 1'd1;
                        end
                        else begin
                           hi_A0_1_CE3 = 1'd0;
                        end
                     end
                  end
                  
                  2'd2:                   begin
                     hi_A0_1_CE3 = 1'd1;
                  end
                  
                  default:                   begin
                     hi_A0_1_CE3 = 1'd0;
                  end
                  
               endcase

            end
         end

         // resource: mux_15bx5i
         always @(s_reg_52 or s_reg_56 or s_reg_69[14:0] or fft_plm_block_in_fx64_A0_3_17_CE1 or gs_ctrl25 or s_reg_35_slice or s_reg_37_slice)
          begin :mux_hi_A0_1_1_inputs_hi_A0_1_A1
            if (fft_plm_block_in_fx64_A0_3_17_CE1) begin
               hi_A0_1_A1 = s_reg_69[14:0];
            end
            else begin
               case (gs_ctrl25) 

                  2'd1:                   begin
                     hi_A0_1_A1 = {s_reg_37_slice, 1'b0};
                  end
                  
                  2'd2:                   begin
                     hi_A0_1_A1 = {s_reg_56, 1'b0};
                  end
                  
                  2'd3:                   begin
                     hi_A0_1_A1 = {s_reg_52, 1'b0};
                  end
                  
                  default:                   begin
                     hi_A0_1_A1 = {s_reg_35_slice, 1'b0};
                  end
                  
               endcase

            end
         end

         // resource: mux_64bx5i
         always @(s_reg_29 or s_reg_33 or fft_Or_64Sx63U_64S_4_87_out1 or fft_Or_64Sx63U_64S_4_89_out1 or s_reg_74 or fft_plm_block_in_fx64_A0_3_17_CE1 or gs_ctrl26)
          begin :mux_hi_A0_1_1_inputs_hi_A0_1_D1
            if (fft_plm_block_in_fx64_A0_3_17_CE1) begin
               hi_A0_1_D1 = s_reg_74;
            end
            else begin
               case (gs_ctrl26) 

                  2'd1:                   begin
                     hi_A0_1_D1 = s_reg_29;
                  end
                  
                  2'd2:                   begin
                     hi_A0_1_D1 = fft_Or_64Sx63U_64S_4_87_out1;
                  end
                  
                  2'd3:                   begin
                     hi_A0_1_D1 = fft_Or_64Sx63U_64S_4_89_out1;
                  end
                  
                  default:                   begin
                     hi_A0_1_D1 = s_reg_33;
                  end
                  
               endcase

            end
         end

         // resource: mux_1bx3i
         always @(fft_plm_block_in_fx64_A0_3_17_CE1 or gs_ctrl28)
          begin :mux_hi_A0_1_1_inputs_hi_A0_1_CE1
            if (fft_plm_block_in_fx64_A0_3_17_CE1) begin
               hi_A0_1_CE1 = fft_plm_block_in_fx64_A0_3_17_CE1;
            end
            else begin
               if (gs_ctrl28) begin
                  hi_A0_1_CE1 = 1'd1;
               end
               else begin
                  hi_A0_1_CE1 = 1'd0;
               end
            end
         end

         // resource: mux_1bx2i
         always @(fft_plm_block_in_fx64_A0_3_17_CE1 or gs_ctrl1 or gs_ctrl27)
          begin :mux_hi_A0_1_1_inputs_hi_A0_1_WE1
            if (fft_plm_block_in_fx64_A0_3_17_CE1) begin
               if (gs_ctrl1) begin
                  hi_A0_1_WE1 = 1'd1;
               end
               else begin
                  hi_A0_1_WE1 = 1'd0;
               end
            end
            else begin
               if (gs_ctrl27) begin
                  hi_A0_1_WE1 = 1'd1;
               end
               else begin
                  hi_A0_1_WE1 = 1'd0;
               end
            end
         end

         // thread: thread_22
         assign hi_A0_1_WEM1 = 64'd18446744073709551615;

         // thread: thread_21
         assign fft_Mul_64Sx64S_86S_4_64_in2 = {{ 41 {fft_Mul_64Sx64S_86S_4_64_in2_slice[22]}}, fft_Mul_64Sx64S_86S_4_64_in2_slice};

         // thread: thread_20
         assign fft_Mul_64Sx64S_86S_4_63_in2 = {40'd0000000000000, {fft_Mul_64Sx64S_86S_4_63_in2_slice1[21:20], {1'b0, {fft_Mul_64Sx64S_86S_4_63_in2_slice1[19], {1'b0, fft_Mul_64Sx64S_86S_4_63_in2_slice1[18:0]}}}}};

         // thread: thread_19
         assign fft_Mul_64Sx64S_86S_4_62_in2 = {{ 41 {fft_Mul_64Sx64S_86S_4_62_in2_slice[22]}}, fft_Mul_64Sx64S_86S_4_62_in2_slice};

         // thread: thread_18
         assign fft_Mul_64Sx64S_86S_4_61_in2 = {40'd0000000000000, {fft_Mul_64Sx64S_86S_4_61_in2_slice1[21:20], {1'b0, {fft_Mul_64Sx64S_86S_4_61_in2_slice1[19], {1'b0, fft_Mul_64Sx64S_86S_4_61_in2_slice1[18:0]}}}}};

         // thread: thread_17
         assign fft_plm_block_in_fx64_A0_1_1_A2 = {fft_plm_block_in_fx64_A0_1_1_A2_slice, 1'b1};

         // thread: thread_16
         assign dma_read_ctrl_data_index = 32'd0000000000;

         // thread: thread_15
         assign dma_read_ctrl_data_length = {dma_read_ctrl_data_length_slice, 1'b0};

         // thread: thread_14
         assign dma_read_ctrl_data_size = {1'b0, dma_read_ctrl_data_size_slice};

         // thread: thread_13
         assign dma_write_ctrl_data_index = 32'd0000000000;

         // thread: thread_12
         assign dma_write_ctrl_data_length = {dma_write_ctrl_data_length_slice, 1'b0};

         // thread: thread_11
         assign dma_write_ctrl_data_size = {1'b0, dma_write_ctrl_data_size_slice};


endmodule

